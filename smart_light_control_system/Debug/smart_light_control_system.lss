
smart_light_control_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e7a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  00002e7a  00002eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         0000204c  00000000  00000000  00002f20  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d1d  00000000  00000000  00004f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008a6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  0000981c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  0000997c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009c09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a3d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 39       	cpi	r26, 0x90	; 144
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <main>
      7a:	0c 94 3b 17 	jmp	0x2e76	; 0x2e76 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e7       	ldi	r26, 0x78	; 120
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 04 17 	jmp	0x2e08	; 0x2e08 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e7       	ldi	r24, 0x78	; 120
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 20 17 	jmp	0x2e40	; 0x2e40 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 10 17 	jmp	0x2e20	; 0x2e20 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 2c 17 	jmp	0x2e58	; 0x2e58 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 30 17 	jmp	0x2e60	; 0x2e60 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <ADC_voidInit>:
#include "BIT_math.h"
#include "ADC_interface.h"
#include "ADC_private.h"

void ADC_voidInit(u8 copy_u8ReferenceVoltage, u8 copy_u8Prescaler)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	00 d0       	rcall	.+0      	; 0xb3c <ADC_voidInit+0x6>
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     b40:	89 83       	std	Y+1, r24	; 0x01
     b42:	6a 83       	std	Y+2, r22	; 0x02
	if((copy_u8ReferenceVoltage<=1 || copy_u8ReferenceVoltage==3)&&(copy_u8Prescaler<=7))
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	82 30       	cpi	r24, 0x02	; 2
     b48:	18 f0       	brcs	.+6      	; 0xb50 <ADC_voidInit+0x1a>
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	83 30       	cpi	r24, 0x03	; 3
     b4e:	11 f5       	brne	.+68     	; 0xb94 <ADC_voidInit+0x5e>
     b50:	8a 81       	ldd	r24, Y+2	; 0x02
     b52:	88 30       	cpi	r24, 0x08	; 8
     b54:	f8 f4       	brcc	.+62     	; 0xb94 <ADC_voidInit+0x5e>
	{
		ADMUX = (ADMUX & 0x3F) | (copy_u8ReferenceVoltage<<REFS0);  //mask all bits except 6&7 (0x3f) and write refv in them
     b56:	a7 e2       	ldi	r26, 0x27	; 39
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	e7 e2       	ldi	r30, 0x27	; 39
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	28 2f       	mov	r18, r24
     b62:	2f 73       	andi	r18, 0x3F	; 63
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	88 2f       	mov	r24, r24
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	00 24       	eor	r0, r0
     b6c:	96 95       	lsr	r25
     b6e:	87 95       	ror	r24
     b70:	07 94       	ror	r0
     b72:	96 95       	lsr	r25
     b74:	87 95       	ror	r24
     b76:	07 94       	ror	r0
     b78:	98 2f       	mov	r25, r24
     b7a:	80 2d       	mov	r24, r0
     b7c:	82 2b       	or	r24, r18
     b7e:	8c 93       	st	X, r24
		ADCSRA = (ADCSRA &  0xF8) | copy_u8Prescaler;
     b80:	a6 e2       	ldi	r26, 0x26	; 38
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 e2       	ldi	r30, 0x26	; 38
     b86:	f0 e0       	ldi	r31, 0x00	; 0
     b88:	80 81       	ld	r24, Z
     b8a:	98 2f       	mov	r25, r24
     b8c:	98 7f       	andi	r25, 0xF8	; 248
     b8e:	8a 81       	ldd	r24, Y+2	; 0x02
     b90:	89 2b       	or	r24, r25
     b92:	8c 93       	st	X, r24
	}
	else
	{
		/*report an error*/
	}
	CLEAR_BIT(ADMUX,ADLAR); //Right adjust
     b94:	a7 e2       	ldi	r26, 0x27	; 39
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e7 e2       	ldi	r30, 0x27	; 39
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADIE);  //disable interrupt
     ba2:	a6 e2       	ldi	r26, 0x26	; 38
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e6 e2       	ldi	r30, 0x26	; 38
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	8c 93       	st	X, r24
	CLEAR_BIT(ADCSRA,ADATE);  //disable AutoTrigger
     bb0:	a6 e2       	ldi	r26, 0x26	; 38
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e6 e2       	ldi	r30, 0x26	; 38
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7d       	andi	r24, 0xDF	; 223
     bbc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADEN);  // Enable ADC
     bbe:	a6 e2       	ldi	r26, 0x26	; 38
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e6 e2       	ldi	r30, 0x26	; 38
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	8c 93       	st	X, r24

}
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	cf 91       	pop	r28
     bd2:	df 91       	pop	r29
     bd4:	08 95       	ret

00000bd6 <ADC_voidReadDigitalValue>:
void ADC_voidReadDigitalValue(u8 copy_u8Channel,u16 * copy_pu16read)
{
     bd6:	df 93       	push	r29
     bd8:	cf 93       	push	r28
     bda:	00 d0       	rcall	.+0      	; 0xbdc <ADC_voidReadDigitalValue+0x6>
     bdc:	0f 92       	push	r0
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	7b 83       	std	Y+3, r23	; 0x03
     be6:	6a 83       	std	Y+2, r22	; 0x02

	if(copy_u8Channel<=31)
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	80 32       	cpi	r24, 0x20	; 32
     bec:	58 f5       	brcc	.+86     	; 0xc44 <ADC_voidReadDigitalValue+0x6e>
		{
			ADMUX = (ADMUX & 0xE0) | copy_u8Channel ;      /*choose pin*/
     bee:	a7 e2       	ldi	r26, 0x27	; 39
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e7 e2       	ldi	r30, 0x27	; 39
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	98 2f       	mov	r25, r24
     bfa:	90 7e       	andi	r25, 0xE0	; 224
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	89 2b       	or	r24, r25
     c00:	8c 93       	st	X, r24

			SET_BIT(ADCSRA,ADSC);  /*start conversion bit*/
     c02:	a6 e2       	ldi	r26, 0x26	; 38
     c04:	b0 e0       	ldi	r27, 0x00	; 0
     c06:	e6 e2       	ldi	r30, 0x26	; 38
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	80 64       	ori	r24, 0x40	; 64
     c0e:	8c 93       	st	X, r24

			while(GET_BIT(ADCSRA,ADIF)==0);  /*polling*/
     c10:	e6 e2       	ldi	r30, 0x26	; 38
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 95       	swap	r24
     c18:	8f 70       	andi	r24, 0x0F	; 15
     c1a:	88 2f       	mov	r24, r24
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	81 70       	andi	r24, 0x01	; 1
     c20:	90 70       	andi	r25, 0x00	; 0
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	a9 f3       	breq	.-22     	; 0xc10 <ADC_voidReadDigitalValue+0x3a>

			SET_BIT(ADCSRA,ADIF);         /*clear flag*/
     c26:	a6 e2       	ldi	r26, 0x26	; 38
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e6 e2       	ldi	r30, 0x26	; 38
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	80 61       	ori	r24, 0x10	; 16
     c32:	8c 93       	st	X, r24

			*copy_pu16read=ADCL;			/*read flag*/
     c34:	e4 e2       	ldi	r30, 0x24	; 36
     c36:	f0 e0       	ldi	r31, 0x00	; 0
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	ea 81       	ldd	r30, Y+2	; 0x02
     c3e:	fb 81       	ldd	r31, Y+3	; 0x03
     c40:	91 83       	std	Z+1, r25	; 0x01
     c42:	80 83       	st	Z, r24
		}
		else
		{
		/*error*/
		}
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	cf 91       	pop	r28
     c4c:	df 91       	pop	r29
     c4e:	08 95       	ret

00000c50 <DIO_voidSetPinDirection>:

#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_voidSetPinDirection            (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinDirection)
{
     c50:	df 93       	push	r29
     c52:	cf 93       	push	r28
     c54:	cd b7       	in	r28, 0x3d	; 61
     c56:	de b7       	in	r29, 0x3e	; 62
     c58:	29 97       	sbiw	r28, 0x09	; 9
     c5a:	0f b6       	in	r0, 0x3f	; 63
     c5c:	f8 94       	cli
     c5e:	de bf       	out	0x3e, r29	; 62
     c60:	0f be       	out	0x3f, r0	; 63
     c62:	cd bf       	out	0x3d, r28	; 61
     c64:	89 83       	std	Y+1, r24	; 0x01
     c66:	6a 83       	std	Y+2, r22	; 0x02
     c68:	4b 83       	std	Y+3, r20	; 0x03
	
	if(copy_u8PinId<=7)
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	88 30       	cpi	r24, 0x08	; 8
     c6e:	08 f0       	brcs	.+2      	; 0xc72 <DIO_voidSetPinDirection+0x22>
     c70:	c9 c1       	rjmp	.+914    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
	{
		if(DIO_PIN_INPUT==copy_u8PinDirection)
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	88 23       	and	r24, r24
     c76:	09 f0       	breq	.+2      	; 0xc7a <DIO_voidSetPinDirection+0x2a>
     c78:	7c c0       	rjmp	.+248    	; 0xd72 <DIO_voidSetPinDirection+0x122>
		{
			switch(copy_u8PortId)
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	28 2f       	mov	r18, r24
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	39 87       	std	Y+9, r19	; 0x09
     c82:	28 87       	std	Y+8, r18	; 0x08
     c84:	88 85       	ldd	r24, Y+8	; 0x08
     c86:	99 85       	ldd	r25, Y+9	; 0x09
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	91 05       	cpc	r25, r1
     c8c:	69 f1       	breq	.+90     	; 0xce8 <DIO_voidSetPinDirection+0x98>
     c8e:	28 85       	ldd	r18, Y+8	; 0x08
     c90:	39 85       	ldd	r19, Y+9	; 0x09
     c92:	22 30       	cpi	r18, 0x02	; 2
     c94:	31 05       	cpc	r19, r1
     c96:	2c f4       	brge	.+10     	; 0xca2 <DIO_voidSetPinDirection+0x52>
     c98:	88 85       	ldd	r24, Y+8	; 0x08
     c9a:	99 85       	ldd	r25, Y+9	; 0x09
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	69 f0       	breq	.+26     	; 0xcba <DIO_voidSetPinDirection+0x6a>
     ca0:	b1 c1       	rjmp	.+866    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
     ca2:	28 85       	ldd	r18, Y+8	; 0x08
     ca4:	39 85       	ldd	r19, Y+9	; 0x09
     ca6:	22 30       	cpi	r18, 0x02	; 2
     ca8:	31 05       	cpc	r19, r1
     caa:	a9 f1       	breq	.+106    	; 0xd16 <DIO_voidSetPinDirection+0xc6>
     cac:	88 85       	ldd	r24, Y+8	; 0x08
     cae:	99 85       	ldd	r25, Y+9	; 0x09
     cb0:	83 30       	cpi	r24, 0x03	; 3
     cb2:	91 05       	cpc	r25, r1
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <DIO_voidSetPinDirection+0x68>
     cb6:	46 c0       	rjmp	.+140    	; 0xd44 <DIO_voidSetPinDirection+0xf4>
     cb8:	a5 c1       	rjmp	.+842    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->DDR,copy_u8PinId); break;
     cba:	a9 e3       	ldi	r26, 0x39	; 57
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e9 e3       	ldi	r30, 0x39	; 57
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_voidSetPinDirection+0x88>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_voidSetPinDirection+0x84>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	11 96       	adiw	r26, 0x01	; 1
     ce2:	8c 93       	st	X, r24
     ce4:	11 97       	sbiw	r26, 0x01	; 1
     ce6:	8e c1       	rjmp	.+796    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->DDR,copy_u8PinId); break;
     ce8:	a6 e3       	ldi	r26, 0x36	; 54
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e6 e3       	ldi	r30, 0x36	; 54
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	81 81       	ldd	r24, Z+1	; 0x01
     cf2:	48 2f       	mov	r20, r24
     cf4:	8a 81       	ldd	r24, Y+2	; 0x02
     cf6:	28 2f       	mov	r18, r24
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	81 e0       	ldi	r24, 0x01	; 1
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	02 2e       	mov	r0, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <DIO_voidSetPinDirection+0xb6>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	0a 94       	dec	r0
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <DIO_voidSetPinDirection+0xb2>
     d0a:	80 95       	com	r24
     d0c:	84 23       	and	r24, r20
     d0e:	11 96       	adiw	r26, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	11 97       	sbiw	r26, 0x01	; 1
     d14:	77 c1       	rjmp	.+750    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->DDR,copy_u8PinId); break;
     d16:	a3 e3       	ldi	r26, 0x33	; 51
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	e3 e3       	ldi	r30, 0x33	; 51
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	48 2f       	mov	r20, r24
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	02 2e       	mov	r0, r18
     d2e:	02 c0       	rjmp	.+4      	; 0xd34 <DIO_voidSetPinDirection+0xe4>
     d30:	88 0f       	add	r24, r24
     d32:	99 1f       	adc	r25, r25
     d34:	0a 94       	dec	r0
     d36:	e2 f7       	brpl	.-8      	; 0xd30 <DIO_voidSetPinDirection+0xe0>
     d38:	80 95       	com	r24
     d3a:	84 23       	and	r24, r20
     d3c:	11 96       	adiw	r26, 0x01	; 1
     d3e:	8c 93       	st	X, r24
     d40:	11 97       	sbiw	r26, 0x01	; 1
     d42:	60 c1       	rjmp	.+704    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->DDR,copy_u8PinId); break;
     d44:	a0 e3       	ldi	r26, 0x30	; 48
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e0 e3       	ldi	r30, 0x30	; 48
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	81 81       	ldd	r24, Z+1	; 0x01
     d4e:	48 2f       	mov	r20, r24
     d50:	8a 81       	ldd	r24, Y+2	; 0x02
     d52:	28 2f       	mov	r18, r24
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 2e       	mov	r0, r18
     d5c:	02 c0       	rjmp	.+4      	; 0xd62 <DIO_voidSetPinDirection+0x112>
     d5e:	88 0f       	add	r24, r24
     d60:	99 1f       	adc	r25, r25
     d62:	0a 94       	dec	r0
     d64:	e2 f7       	brpl	.-8      	; 0xd5e <DIO_voidSetPinDirection+0x10e>
     d66:	80 95       	com	r24
     d68:	84 23       	and	r24, r20
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	8c 93       	st	X, r24
     d6e:	11 97       	sbiw	r26, 0x01	; 1
     d70:	49 c1       	rjmp	.+658    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			default: break;
		
			}
		}
		else if(DIO_PIN_OUTPUT==copy_u8PinDirection)
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	81 30       	cpi	r24, 0x01	; 1
     d76:	09 f0       	breq	.+2      	; 0xd7a <DIO_voidSetPinDirection+0x12a>
     d78:	78 c0       	rjmp	.+240    	; 0xe6a <DIO_voidSetPinDirection+0x21a>
		{
			switch(copy_u8PortId)
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	28 2f       	mov	r18, r24
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	3f 83       	std	Y+7, r19	; 0x07
     d82:	2e 83       	std	Y+6, r18	; 0x06
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	91 05       	cpc	r25, r1
     d8c:	61 f1       	breq	.+88     	; 0xde6 <DIO_voidSetPinDirection+0x196>
     d8e:	2e 81       	ldd	r18, Y+6	; 0x06
     d90:	3f 81       	ldd	r19, Y+7	; 0x07
     d92:	22 30       	cpi	r18, 0x02	; 2
     d94:	31 05       	cpc	r19, r1
     d96:	2c f4       	brge	.+10     	; 0xda2 <DIO_voidSetPinDirection+0x152>
     d98:	8e 81       	ldd	r24, Y+6	; 0x06
     d9a:	9f 81       	ldd	r25, Y+7	; 0x07
     d9c:	00 97       	sbiw	r24, 0x00	; 0
     d9e:	69 f0       	breq	.+26     	; 0xdba <DIO_voidSetPinDirection+0x16a>
     da0:	31 c1       	rjmp	.+610    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
     da2:	2e 81       	ldd	r18, Y+6	; 0x06
     da4:	3f 81       	ldd	r19, Y+7	; 0x07
     da6:	22 30       	cpi	r18, 0x02	; 2
     da8:	31 05       	cpc	r19, r1
     daa:	99 f1       	breq	.+102    	; 0xe12 <DIO_voidSetPinDirection+0x1c2>
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	9f 81       	ldd	r25, Y+7	; 0x07
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 05       	cpc	r25, r1
     db4:	09 f4       	brne	.+2      	; 0xdb8 <DIO_voidSetPinDirection+0x168>
     db6:	43 c0       	rjmp	.+134    	; 0xe3e <DIO_voidSetPinDirection+0x1ee>
     db8:	25 c1       	rjmp	.+586    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			{
			case DIO_PORTA: SET_BIT(GPIOA ->DDR,copy_u8PinId); break;
     dba:	a9 e3       	ldi	r26, 0x39	; 57
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	e9 e3       	ldi	r30, 0x39	; 57
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <DIO_voidSetPinDirection+0x188>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <DIO_voidSetPinDirection+0x184>
     ddc:	84 2b       	or	r24, r20
     dde:	11 96       	adiw	r26, 0x01	; 1
     de0:	8c 93       	st	X, r24
     de2:	11 97       	sbiw	r26, 0x01	; 1
     de4:	0f c1       	rjmp	.+542    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTB: SET_BIT(GPIOB ->DDR,copy_u8PinId); break;
     de6:	a6 e3       	ldi	r26, 0x36	; 54
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e6 e3       	ldi	r30, 0x36	; 54
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	81 81       	ldd	r24, Z+1	; 0x01
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_voidSetPinDirection+0x1b4>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_voidSetPinDirection+0x1b0>
     e08:	84 2b       	or	r24, r20
     e0a:	11 96       	adiw	r26, 0x01	; 1
     e0c:	8c 93       	st	X, r24
     e0e:	11 97       	sbiw	r26, 0x01	; 1
     e10:	f9 c0       	rjmp	.+498    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTC: SET_BIT(GPIOC ->DDR,copy_u8PinId); break;
     e12:	a3 e3       	ldi	r26, 0x33	; 51
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	e3 e3       	ldi	r30, 0x33	; 51
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	81 81       	ldd	r24, Z+1	; 0x01
     e1c:	48 2f       	mov	r20, r24
     e1e:	8a 81       	ldd	r24, Y+2	; 0x02
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	02 2e       	mov	r0, r18
     e2a:	02 c0       	rjmp	.+4      	; 0xe30 <DIO_voidSetPinDirection+0x1e0>
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	0a 94       	dec	r0
     e32:	e2 f7       	brpl	.-8      	; 0xe2c <DIO_voidSetPinDirection+0x1dc>
     e34:	84 2b       	or	r24, r20
     e36:	11 96       	adiw	r26, 0x01	; 1
     e38:	8c 93       	st	X, r24
     e3a:	11 97       	sbiw	r26, 0x01	; 1
     e3c:	e3 c0       	rjmp	.+454    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTD: SET_BIT(GPIOD ->DDR,copy_u8PinId); break;
     e3e:	a0 e3       	ldi	r26, 0x30	; 48
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e0 e3       	ldi	r30, 0x30	; 48
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	81 81       	ldd	r24, Z+1	; 0x01
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_voidSetPinDirection+0x20c>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_voidSetPinDirection+0x208>
     e60:	84 2b       	or	r24, r20
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	8c 93       	st	X, r24
     e66:	11 97       	sbiw	r26, 0x01	; 1
     e68:	cd c0       	rjmp	.+410    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			default: break;
			}
		
		
		}
		else if(DIO_PIN_INPUT_PULLUP==copy_u8PinDirection)
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	09 f0       	breq	.+2      	; 0xe72 <DIO_voidSetPinDirection+0x222>
     e70:	c9 c0       	rjmp	.+402    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
		{
			
				switch(copy_u8PortId)
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	3d 83       	std	Y+5, r19	; 0x05
     e7a:	2c 83       	std	Y+4, r18	; 0x04
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	9d 81       	ldd	r25, Y+5	; 0x05
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	09 f4       	brne	.+2      	; 0xe88 <DIO_voidSetPinDirection+0x238>
     e86:	41 c0       	rjmp	.+130    	; 0xf0a <DIO_voidSetPinDirection+0x2ba>
     e88:	2c 81       	ldd	r18, Y+4	; 0x04
     e8a:	3d 81       	ldd	r19, Y+5	; 0x05
     e8c:	22 30       	cpi	r18, 0x02	; 2
     e8e:	31 05       	cpc	r19, r1
     e90:	2c f4       	brge	.+10     	; 0xe9c <DIO_voidSetPinDirection+0x24c>
     e92:	8c 81       	ldd	r24, Y+4	; 0x04
     e94:	9d 81       	ldd	r25, Y+5	; 0x05
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	71 f0       	breq	.+28     	; 0xeb6 <DIO_voidSetPinDirection+0x266>
     e9a:	b4 c0       	rjmp	.+360    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
     e9c:	2c 81       	ldd	r18, Y+4	; 0x04
     e9e:	3d 81       	ldd	r19, Y+5	; 0x05
     ea0:	22 30       	cpi	r18, 0x02	; 2
     ea2:	31 05       	cpc	r19, r1
     ea4:	09 f4       	brne	.+2      	; 0xea8 <DIO_voidSetPinDirection+0x258>
     ea6:	5b c0       	rjmp	.+182    	; 0xf5e <DIO_voidSetPinDirection+0x30e>
     ea8:	8c 81       	ldd	r24, Y+4	; 0x04
     eaa:	9d 81       	ldd	r25, Y+5	; 0x05
     eac:	83 30       	cpi	r24, 0x03	; 3
     eae:	91 05       	cpc	r25, r1
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <DIO_voidSetPinDirection+0x264>
     eb2:	7f c0       	rjmp	.+254    	; 0xfb2 <DIO_voidSetPinDirection+0x362>
     eb4:	a7 c0       	rjmp	.+334    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->DDR,copy_u8PinId); SET_BIT(GPIOA ->PORT,copy_u8PinId); break;
     eb6:	a9 e3       	ldi	r26, 0x39	; 57
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e9 e3       	ldi	r30, 0x39	; 57
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	81 81       	ldd	r24, Z+1	; 0x01
     ec0:	48 2f       	mov	r20, r24
     ec2:	8a 81       	ldd	r24, Y+2	; 0x02
     ec4:	28 2f       	mov	r18, r24
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <DIO_voidSetPinDirection+0x282>
     ece:	88 0f       	add	r24, r24
     ed0:	99 1f       	adc	r25, r25
     ed2:	2a 95       	dec	r18
     ed4:	e2 f7       	brpl	.-8      	; 0xece <DIO_voidSetPinDirection+0x27e>
     ed6:	80 95       	com	r24
     ed8:	84 23       	and	r24, r20
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	8c 93       	st	X, r24
     ede:	a9 e3       	ldi	r26, 0x39	; 57
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e9 e3       	ldi	r30, 0x39	; 57
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	48 2f       	mov	r20, r24
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_voidSetPinDirection+0x2ac>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_voidSetPinDirection+0x2a8>
     f00:	84 2b       	or	r24, r20
     f02:	12 96       	adiw	r26, 0x02	; 2
     f04:	8c 93       	st	X, r24
     f06:	12 97       	sbiw	r26, 0x02	; 2
     f08:	7d c0       	rjmp	.+250    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->DDR,copy_u8PinId); SET_BIT(GPIOB ->PORT,copy_u8PinId); break;
     f0a:	a6 e3       	ldi	r26, 0x36	; 54
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e6 e3       	ldi	r30, 0x36	; 54
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	81 81       	ldd	r24, Z+1	; 0x01
     f14:	48 2f       	mov	r20, r24
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_voidSetPinDirection+0x2d6>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	2a 95       	dec	r18
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_voidSetPinDirection+0x2d2>
     f2a:	80 95       	com	r24
     f2c:	84 23       	and	r24, r20
     f2e:	11 96       	adiw	r26, 0x01	; 1
     f30:	8c 93       	st	X, r24
     f32:	a6 e3       	ldi	r26, 0x36	; 54
     f34:	b0 e0       	ldi	r27, 0x00	; 0
     f36:	e6 e3       	ldi	r30, 0x36	; 54
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	82 81       	ldd	r24, Z+2	; 0x02
     f3c:	48 2f       	mov	r20, r24
     f3e:	8a 81       	ldd	r24, Y+2	; 0x02
     f40:	28 2f       	mov	r18, r24
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	02 2e       	mov	r0, r18
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <DIO_voidSetPinDirection+0x300>
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	e2 f7       	brpl	.-8      	; 0xf4c <DIO_voidSetPinDirection+0x2fc>
     f54:	84 2b       	or	r24, r20
     f56:	12 96       	adiw	r26, 0x02	; 2
     f58:	8c 93       	st	X, r24
     f5a:	12 97       	sbiw	r26, 0x02	; 2
     f5c:	53 c0       	rjmp	.+166    	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->DDR,copy_u8PinId); SET_BIT(GPIOC ->PORT,copy_u8PinId); break;
     f5e:	a3 e3       	ldi	r26, 0x33	; 51
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e3 e3       	ldi	r30, 0x33	; 51
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	81 81       	ldd	r24, Z+1	; 0x01
     f68:	48 2f       	mov	r20, r24
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 c0       	rjmp	.+4      	; 0xf7a <DIO_voidSetPinDirection+0x32a>
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	2a 95       	dec	r18
     f7c:	e2 f7       	brpl	.-8      	; 0xf76 <DIO_voidSetPinDirection+0x326>
     f7e:	80 95       	com	r24
     f80:	84 23       	and	r24, r20
     f82:	11 96       	adiw	r26, 0x01	; 1
     f84:	8c 93       	st	X, r24
     f86:	a3 e3       	ldi	r26, 0x33	; 51
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e3 e3       	ldi	r30, 0x33	; 51
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	82 81       	ldd	r24, Z+2	; 0x02
     f90:	48 2f       	mov	r20, r24
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	02 2e       	mov	r0, r18
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <DIO_voidSetPinDirection+0x354>
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	0a 94       	dec	r0
     fa6:	e2 f7       	brpl	.-8      	; 0xfa0 <DIO_voidSetPinDirection+0x350>
     fa8:	84 2b       	or	r24, r20
     faa:	12 96       	adiw	r26, 0x02	; 2
     fac:	8c 93       	st	X, r24
     fae:	12 97       	sbiw	r26, 0x02	; 2
     fb0:	29 c0       	rjmp	.+82     	; 0x1004 <DIO_voidSetPinDirection+0x3b4>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->DDR,copy_u8PinId); SET_BIT(GPIOD ->PORT,copy_u8PinId); break;
     fb2:	a0 e3       	ldi	r26, 0x30	; 48
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e0 e3       	ldi	r30, 0x30	; 48
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	81 81       	ldd	r24, Z+1	; 0x01
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 c0       	rjmp	.+4      	; 0xfce <DIO_voidSetPinDirection+0x37e>
     fca:	88 0f       	add	r24, r24
     fcc:	99 1f       	adc	r25, r25
     fce:	2a 95       	dec	r18
     fd0:	e2 f7       	brpl	.-8      	; 0xfca <DIO_voidSetPinDirection+0x37a>
     fd2:	80 95       	com	r24
     fd4:	84 23       	and	r24, r20
     fd6:	11 96       	adiw	r26, 0x01	; 1
     fd8:	8c 93       	st	X, r24
     fda:	a0 e3       	ldi	r26, 0x30	; 48
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e0 e3       	ldi	r30, 0x30	; 48
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	82 81       	ldd	r24, Z+2	; 0x02
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_voidSetPinDirection+0x3a8>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_voidSetPinDirection+0x3a4>
     ffc:	84 2b       	or	r24, r20
     ffe:	12 96       	adiw	r26, 0x02	; 2
    1000:	8c 93       	st	X, r24
    1002:	12 97       	sbiw	r26, 0x02	; 2
	}
	else
	{
	/*report an error*/
	}
}
    1004:	29 96       	adiw	r28, 0x09	; 9
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8 copy_u8PinValue)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	29 97       	sbiw	r28, 0x09	; 9
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	89 83       	std	Y+1, r24	; 0x01
    102c:	6a 83       	std	Y+2, r22	; 0x02
    102e:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	88 30       	cpi	r24, 0x08	; 8
    1034:	08 f0       	brcs	.+2      	; 0x1038 <DIO_voidSetPinValue+0x22>
    1036:	77 c1       	rjmp	.+750    	; 0x1326 <DIO_voidSetPinValue+0x310>
	{
		if(DIO_PIN_LOW==copy_u8PinValue )
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	88 23       	and	r24, r24
    103c:	09 f0       	breq	.+2      	; 0x1040 <DIO_voidSetPinValue+0x2a>
    103e:	7c c0       	rjmp	.+248    	; 0x1138 <DIO_voidSetPinValue+0x122>
		{
		switch(copy_u8PortId)
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	28 2f       	mov	r18, r24
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	39 87       	std	Y+9, r19	; 0x09
    1048:	28 87       	std	Y+8, r18	; 0x08
    104a:	88 85       	ldd	r24, Y+8	; 0x08
    104c:	99 85       	ldd	r25, Y+9	; 0x09
    104e:	81 30       	cpi	r24, 0x01	; 1
    1050:	91 05       	cpc	r25, r1
    1052:	69 f1       	breq	.+90     	; 0x10ae <DIO_voidSetPinValue+0x98>
    1054:	28 85       	ldd	r18, Y+8	; 0x08
    1056:	39 85       	ldd	r19, Y+9	; 0x09
    1058:	22 30       	cpi	r18, 0x02	; 2
    105a:	31 05       	cpc	r19, r1
    105c:	2c f4       	brge	.+10     	; 0x1068 <DIO_voidSetPinValue+0x52>
    105e:	88 85       	ldd	r24, Y+8	; 0x08
    1060:	99 85       	ldd	r25, Y+9	; 0x09
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	69 f0       	breq	.+26     	; 0x1080 <DIO_voidSetPinValue+0x6a>
    1066:	5f c1       	rjmp	.+702    	; 0x1326 <DIO_voidSetPinValue+0x310>
    1068:	28 85       	ldd	r18, Y+8	; 0x08
    106a:	39 85       	ldd	r19, Y+9	; 0x09
    106c:	22 30       	cpi	r18, 0x02	; 2
    106e:	31 05       	cpc	r19, r1
    1070:	a9 f1       	breq	.+106    	; 0x10dc <DIO_voidSetPinValue+0xc6>
    1072:	88 85       	ldd	r24, Y+8	; 0x08
    1074:	99 85       	ldd	r25, Y+9	; 0x09
    1076:	83 30       	cpi	r24, 0x03	; 3
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <DIO_voidSetPinValue+0x68>
    107c:	46 c0       	rjmp	.+140    	; 0x110a <DIO_voidSetPinValue+0xf4>
    107e:	53 c1       	rjmp	.+678    	; 0x1326 <DIO_voidSetPinValue+0x310>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->PORT,copy_u8PinId); break;
    1080:	a9 e3       	ldi	r26, 0x39	; 57
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e9 e3       	ldi	r30, 0x39	; 57
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	82 81       	ldd	r24, Z+2	; 0x02
    108a:	48 2f       	mov	r20, r24
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	28 2f       	mov	r18, r24
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	02 2e       	mov	r0, r18
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_voidSetPinValue+0x88>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	0a 94       	dec	r0
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_voidSetPinValue+0x84>
    10a2:	80 95       	com	r24
    10a4:	84 23       	and	r24, r20
    10a6:	12 96       	adiw	r26, 0x02	; 2
    10a8:	8c 93       	st	X, r24
    10aa:	12 97       	sbiw	r26, 0x02	; 2
    10ac:	3c c1       	rjmp	.+632    	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->PORT,copy_u8PinId); break;
    10ae:	a6 e3       	ldi	r26, 0x36	; 54
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	e6 e3       	ldi	r30, 0x36	; 54
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	48 2f       	mov	r20, r24
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_voidSetPinValue+0xb6>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_voidSetPinValue+0xb2>
    10d0:	80 95       	com	r24
    10d2:	84 23       	and	r24, r20
    10d4:	12 96       	adiw	r26, 0x02	; 2
    10d6:	8c 93       	st	X, r24
    10d8:	12 97       	sbiw	r26, 0x02	; 2
    10da:	25 c1       	rjmp	.+586    	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->PORT,copy_u8PinId); break;
    10dc:	a3 e3       	ldi	r26, 0x33	; 51
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e3 e3       	ldi	r30, 0x33	; 51
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	82 81       	ldd	r24, Z+2	; 0x02
    10e6:	48 2f       	mov	r20, r24
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_voidSetPinValue+0xe4>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_voidSetPinValue+0xe0>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	12 96       	adiw	r26, 0x02	; 2
    1104:	8c 93       	st	X, r24
    1106:	12 97       	sbiw	r26, 0x02	; 2
    1108:	0e c1       	rjmp	.+540    	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->PORT,copy_u8PinId); break;
    110a:	a0 e3       	ldi	r26, 0x30	; 48
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e0 e3       	ldi	r30, 0x30	; 48
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <DIO_voidSetPinValue+0x112>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <DIO_voidSetPinValue+0x10e>
    112c:	80 95       	com	r24
    112e:	84 23       	and	r24, r20
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	8c 93       	st	X, r24
    1134:	12 97       	sbiw	r26, 0x02	; 2
    1136:	f7 c0       	rjmp	.+494    	; 0x1326 <DIO_voidSetPinValue+0x310>
			default: break;
			}	
			
		}
	    else if (DIO_PIN_HIGH==copy_u8PinValue)
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	09 f0       	breq	.+2      	; 0x1140 <DIO_voidSetPinValue+0x12a>
    113e:	78 c0       	rjmp	.+240    	; 0x1230 <DIO_voidSetPinValue+0x21a>
		{
			switch(copy_u8PortId)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3f 83       	std	Y+7, r19	; 0x07
    1148:	2e 83       	std	Y+6, r18	; 0x06
    114a:	8e 81       	ldd	r24, Y+6	; 0x06
    114c:	9f 81       	ldd	r25, Y+7	; 0x07
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	61 f1       	breq	.+88     	; 0x11ac <DIO_voidSetPinValue+0x196>
    1154:	2e 81       	ldd	r18, Y+6	; 0x06
    1156:	3f 81       	ldd	r19, Y+7	; 0x07
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <DIO_voidSetPinValue+0x152>
    115e:	8e 81       	ldd	r24, Y+6	; 0x06
    1160:	9f 81       	ldd	r25, Y+7	; 0x07
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	69 f0       	breq	.+26     	; 0x1180 <DIO_voidSetPinValue+0x16a>
    1166:	df c0       	rjmp	.+446    	; 0x1326 <DIO_voidSetPinValue+0x310>
    1168:	2e 81       	ldd	r18, Y+6	; 0x06
    116a:	3f 81       	ldd	r19, Y+7	; 0x07
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	99 f1       	breq	.+102    	; 0x11d8 <DIO_voidSetPinValue+0x1c2>
    1172:	8e 81       	ldd	r24, Y+6	; 0x06
    1174:	9f 81       	ldd	r25, Y+7	; 0x07
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	09 f4       	brne	.+2      	; 0x117e <DIO_voidSetPinValue+0x168>
    117c:	43 c0       	rjmp	.+134    	; 0x1204 <DIO_voidSetPinValue+0x1ee>
    117e:	d3 c0       	rjmp	.+422    	; 0x1326 <DIO_voidSetPinValue+0x310>
			{
			case DIO_PORTA: SET_BIT(GPIOA ->PORT,copy_u8PinId); break;
    1180:	a9 e3       	ldi	r26, 0x39	; 57
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e9 e3       	ldi	r30, 0x39	; 57
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	82 81       	ldd	r24, Z+2	; 0x02
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_voidSetPinValue+0x188>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_voidSetPinValue+0x184>
    11a2:	84 2b       	or	r24, r20
    11a4:	12 96       	adiw	r26, 0x02	; 2
    11a6:	8c 93       	st	X, r24
    11a8:	12 97       	sbiw	r26, 0x02	; 2
    11aa:	bd c0       	rjmp	.+378    	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTB: SET_BIT(GPIOB ->PORT,copy_u8PinId); break;
    11ac:	a6 e3       	ldi	r26, 0x36	; 54
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e6 e3       	ldi	r30, 0x36	; 54
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	82 81       	ldd	r24, Z+2	; 0x02
    11b6:	48 2f       	mov	r20, r24
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	02 2e       	mov	r0, r18
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <DIO_voidSetPinValue+0x1b4>
    11c6:	88 0f       	add	r24, r24
    11c8:	99 1f       	adc	r25, r25
    11ca:	0a 94       	dec	r0
    11cc:	e2 f7       	brpl	.-8      	; 0x11c6 <DIO_voidSetPinValue+0x1b0>
    11ce:	84 2b       	or	r24, r20
    11d0:	12 96       	adiw	r26, 0x02	; 2
    11d2:	8c 93       	st	X, r24
    11d4:	12 97       	sbiw	r26, 0x02	; 2
    11d6:	a7 c0       	rjmp	.+334    	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTC: SET_BIT(GPIOC ->PORT,copy_u8PinId); break;
    11d8:	a3 e3       	ldi	r26, 0x33	; 51
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e3 e3       	ldi	r30, 0x33	; 51
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_voidSetPinValue+0x1e0>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_voidSetPinValue+0x1dc>
    11fa:	84 2b       	or	r24, r20
    11fc:	12 96       	adiw	r26, 0x02	; 2
    11fe:	8c 93       	st	X, r24
    1200:	12 97       	sbiw	r26, 0x02	; 2
    1202:	91 c0       	rjmp	.+290    	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTD: SET_BIT(GPIOD ->PORT,copy_u8PinId); break;
    1204:	a0 e3       	ldi	r26, 0x30	; 48
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	e0 e3       	ldi	r30, 0x30	; 48
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	48 2f       	mov	r20, r24
    1210:	8a 81       	ldd	r24, Y+2	; 0x02
    1212:	28 2f       	mov	r18, r24
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	02 2e       	mov	r0, r18
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_voidSetPinValue+0x20c>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	0a 94       	dec	r0
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_voidSetPinValue+0x208>
    1226:	84 2b       	or	r24, r20
    1228:	12 96       	adiw	r26, 0x02	; 2
    122a:	8c 93       	st	X, r24
    122c:	12 97       	sbiw	r26, 0x02	; 2
    122e:	7b c0       	rjmp	.+246    	; 0x1326 <DIO_voidSetPinValue+0x310>
			default: break;
			}	
			
		}
         else if(DIO_PIN_TOGGLE==copy_u8PinValue)
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	09 f0       	breq	.+2      	; 0x1238 <DIO_voidSetPinValue+0x222>
    1236:	77 c0       	rjmp	.+238    	; 0x1326 <DIO_voidSetPinValue+0x310>
		 {
			 	switch(copy_u8PortId)
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	28 2f       	mov	r18, r24
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	3d 83       	std	Y+5, r19	; 0x05
    1240:	2c 83       	std	Y+4, r18	; 0x04
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	9d 81       	ldd	r25, Y+5	; 0x05
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	91 05       	cpc	r25, r1
    124a:	61 f1       	breq	.+88     	; 0x12a4 <DIO_voidSetPinValue+0x28e>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <DIO_voidSetPinValue+0x24a>
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f0       	breq	.+26     	; 0x1278 <DIO_voidSetPinValue+0x262>
    125e:	63 c0       	rjmp	.+198    	; 0x1326 <DIO_voidSetPinValue+0x310>
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	3d 81       	ldd	r19, Y+5	; 0x05
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	99 f1       	breq	.+102    	; 0x12d0 <DIO_voidSetPinValue+0x2ba>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	83 30       	cpi	r24, 0x03	; 3
    1270:	91 05       	cpc	r25, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <DIO_voidSetPinValue+0x260>
    1274:	43 c0       	rjmp	.+134    	; 0x12fc <DIO_voidSetPinValue+0x2e6>
    1276:	57 c0       	rjmp	.+174    	; 0x1326 <DIO_voidSetPinValue+0x310>
			{
			case DIO_PORTA: TOGGLE_BIT(GPIOA ->PORT,copy_u8PinId); break;
    1278:	a9 e3       	ldi	r26, 0x39	; 57
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e9 e3       	ldi	r30, 0x39	; 57
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	82 81       	ldd	r24, Z+2	; 0x02
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_voidSetPinValue+0x280>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_voidSetPinValue+0x27c>
    129a:	84 27       	eor	r24, r20
    129c:	12 96       	adiw	r26, 0x02	; 2
    129e:	8c 93       	st	X, r24
    12a0:	12 97       	sbiw	r26, 0x02	; 2
    12a2:	41 c0       	rjmp	.+130    	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTB: TOGGLE_BIT(GPIOB ->PORT,copy_u8PinId); break;
    12a4:	a6 e3       	ldi	r26, 0x36	; 54
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e6 e3       	ldi	r30, 0x36	; 54
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <DIO_voidSetPinValue+0x2ac>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <DIO_voidSetPinValue+0x2a8>
    12c6:	84 27       	eor	r24, r20
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	8c 93       	st	X, r24
    12cc:	12 97       	sbiw	r26, 0x02	; 2
    12ce:	2b c0       	rjmp	.+86     	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTC: TOGGLE_BIT(GPIOC ->PORT,copy_u8PinId); break;
    12d0:	a3 e3       	ldi	r26, 0x33	; 51
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e3 e3       	ldi	r30, 0x33	; 51
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	82 81       	ldd	r24, Z+2	; 0x02
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_voidSetPinValue+0x2d8>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_voidSetPinValue+0x2d4>
    12f2:	84 27       	eor	r24, r20
    12f4:	12 96       	adiw	r26, 0x02	; 2
    12f6:	8c 93       	st	X, r24
    12f8:	12 97       	sbiw	r26, 0x02	; 2
    12fa:	15 c0       	rjmp	.+42     	; 0x1326 <DIO_voidSetPinValue+0x310>
			case DIO_PORTD: TOGGLE_BIT(GPIOD ->PORT,copy_u8PinId); break;
    12fc:	a0 e3       	ldi	r26, 0x30	; 48
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e0 e3       	ldi	r30, 0x30	; 48
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	82 81       	ldd	r24, Z+2	; 0x02
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <DIO_voidSetPinValue+0x304>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <DIO_voidSetPinValue+0x300>
    131e:	84 27       	eor	r24, r20
    1320:	12 96       	adiw	r26, 0x02	; 2
    1322:	8c 93       	st	X, r24
    1324:	12 97       	sbiw	r26, 0x02	; 2
	else
	{
			 /*report an error*/
	}
		 
}
    1326:	29 96       	adiw	r28, 0x09	; 9
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue                (u8 copy_u8PortId, u8 copy_u8PinId, u8* copy_pu8PinValue)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <DIO_voidGetPinValue+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <DIO_voidGetPinValue+0x8>
    1340:	00 d0       	rcall	.+0      	; 0x1342 <DIO_voidGetPinValue+0xa>
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	6a 83       	std	Y+2, r22	; 0x02
    134a:	5c 83       	std	Y+4, r21	; 0x04
    134c:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8PinId<=7)
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	08 f0       	brcs	.+2      	; 0x1356 <DIO_voidGetPinValue+0x1e>
    1354:	70 c0       	rjmp	.+224    	; 0x1436 <DIO_voidGetPinValue+0xfe>
	{
		switch(copy_u8PortId)
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	28 2f       	mov	r18, r24
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	3e 83       	std	Y+6, r19	; 0x06
    135e:	2d 83       	std	Y+5, r18	; 0x05
    1360:	4d 81       	ldd	r20, Y+5	; 0x05
    1362:	5e 81       	ldd	r21, Y+6	; 0x06
    1364:	41 30       	cpi	r20, 0x01	; 1
    1366:	51 05       	cpc	r21, r1
    1368:	59 f1       	breq	.+86     	; 0x13c0 <DIO_voidGetPinValue+0x88>
    136a:	8d 81       	ldd	r24, Y+5	; 0x05
    136c:	9e 81       	ldd	r25, Y+6	; 0x06
    136e:	82 30       	cpi	r24, 0x02	; 2
    1370:	91 05       	cpc	r25, r1
    1372:	34 f4       	brge	.+12     	; 0x1380 <DIO_voidGetPinValue+0x48>
    1374:	2d 81       	ldd	r18, Y+5	; 0x05
    1376:	3e 81       	ldd	r19, Y+6	; 0x06
    1378:	21 15       	cp	r18, r1
    137a:	31 05       	cpc	r19, r1
    137c:	69 f0       	breq	.+26     	; 0x1398 <DIO_voidGetPinValue+0x60>
    137e:	5b c0       	rjmp	.+182    	; 0x1436 <DIO_voidGetPinValue+0xfe>
    1380:	4d 81       	ldd	r20, Y+5	; 0x05
    1382:	5e 81       	ldd	r21, Y+6	; 0x06
    1384:	42 30       	cpi	r20, 0x02	; 2
    1386:	51 05       	cpc	r21, r1
    1388:	79 f1       	breq	.+94     	; 0x13e8 <DIO_voidGetPinValue+0xb0>
    138a:	8d 81       	ldd	r24, Y+5	; 0x05
    138c:	9e 81       	ldd	r25, Y+6	; 0x06
    138e:	83 30       	cpi	r24, 0x03	; 3
    1390:	91 05       	cpc	r25, r1
    1392:	09 f4       	brne	.+2      	; 0x1396 <DIO_voidGetPinValue+0x5e>
    1394:	3d c0       	rjmp	.+122    	; 0x1410 <DIO_voidGetPinValue+0xd8>
    1396:	4f c0       	rjmp	.+158    	; 0x1436 <DIO_voidGetPinValue+0xfe>
		{
		case DIO_PORTA: * copy_pu8PinValue = GET_BIT(GPIOA -> PIN, copy_u8PinId); break;
    1398:	e9 e3       	ldi	r30, 0x39	; 57
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	8a 81       	ldd	r24, Y+2	; 0x02
    13a4:	88 2f       	mov	r24, r24
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	a9 01       	movw	r20, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_voidGetPinValue+0x78>
    13ac:	55 95       	asr	r21
    13ae:	47 95       	ror	r20
    13b0:	8a 95       	dec	r24
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_voidGetPinValue+0x74>
    13b4:	ca 01       	movw	r24, r20
    13b6:	81 70       	andi	r24, 0x01	; 1
    13b8:	eb 81       	ldd	r30, Y+3	; 0x03
    13ba:	fc 81       	ldd	r31, Y+4	; 0x04
    13bc:	80 83       	st	Z, r24
    13be:	3b c0       	rjmp	.+118    	; 0x1436 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTB: * copy_pu8PinValue = GET_BIT(GPIOB -> PIN, copy_u8PinId); break;
    13c0:	e6 e3       	ldi	r30, 0x36	; 54
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	8a 81       	ldd	r24, Y+2	; 0x02
    13cc:	88 2f       	mov	r24, r24
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	a9 01       	movw	r20, r18
    13d2:	02 c0       	rjmp	.+4      	; 0x13d8 <DIO_voidGetPinValue+0xa0>
    13d4:	55 95       	asr	r21
    13d6:	47 95       	ror	r20
    13d8:	8a 95       	dec	r24
    13da:	e2 f7       	brpl	.-8      	; 0x13d4 <DIO_voidGetPinValue+0x9c>
    13dc:	ca 01       	movw	r24, r20
    13de:	81 70       	andi	r24, 0x01	; 1
    13e0:	eb 81       	ldd	r30, Y+3	; 0x03
    13e2:	fc 81       	ldd	r31, Y+4	; 0x04
    13e4:	80 83       	st	Z, r24
    13e6:	27 c0       	rjmp	.+78     	; 0x1436 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTC: * copy_pu8PinValue = GET_BIT(GPIOC -> PIN, copy_u8PinId); break;
    13e8:	e3 e3       	ldi	r30, 0x33	; 51
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	28 2f       	mov	r18, r24
    13f0:	30 e0       	ldi	r19, 0x00	; 0
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	a9 01       	movw	r20, r18
    13fa:	02 c0       	rjmp	.+4      	; 0x1400 <DIO_voidGetPinValue+0xc8>
    13fc:	55 95       	asr	r21
    13fe:	47 95       	ror	r20
    1400:	8a 95       	dec	r24
    1402:	e2 f7       	brpl	.-8      	; 0x13fc <DIO_voidGetPinValue+0xc4>
    1404:	ca 01       	movw	r24, r20
    1406:	81 70       	andi	r24, 0x01	; 1
    1408:	eb 81       	ldd	r30, Y+3	; 0x03
    140a:	fc 81       	ldd	r31, Y+4	; 0x04
    140c:	80 83       	st	Z, r24
    140e:	13 c0       	rjmp	.+38     	; 0x1436 <DIO_voidGetPinValue+0xfe>
		case DIO_PORTD: * copy_pu8PinValue = GET_BIT(GPIOD -> PIN, copy_u8PinId); break;
    1410:	e0 e3       	ldi	r30, 0x30	; 48
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 2f       	mov	r24, r24
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a9 01       	movw	r20, r18
    1422:	02 c0       	rjmp	.+4      	; 0x1428 <DIO_voidGetPinValue+0xf0>
    1424:	55 95       	asr	r21
    1426:	47 95       	ror	r20
    1428:	8a 95       	dec	r24
    142a:	e2 f7       	brpl	.-8      	; 0x1424 <DIO_voidGetPinValue+0xec>
    142c:	ca 01       	movw	r24, r20
    142e:	81 70       	andi	r24, 0x01	; 1
    1430:	eb 81       	ldd	r30, Y+3	; 0x03
    1432:	fc 81       	ldd	r31, Y+4	; 0x04
    1434:	80 83       	st	Z, r24
	else
	{
		 /*report an error*/
	}
	
}
    1436:	26 96       	adiw	r28, 0x06	; 6
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	cf 91       	pop	r28
    1444:	df 91       	pop	r29
    1446:	08 95       	ret

00001448 <DIO_voidTogglePinValue>:
void DIO_voidTogglePinValue             (u8 copy_u8PortId, u8 copy_u8PinId)
{
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	00 d0       	rcall	.+0      	; 0x144e <DIO_voidTogglePinValue+0x6>
    144e:	00 d0       	rcall	.+0      	; 0x1450 <DIO_voidTogglePinValue+0x8>
    1450:	cd b7       	in	r28, 0x3d	; 61
    1452:	de b7       	in	r29, 0x3e	; 62
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinId>=7)
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	87 30       	cpi	r24, 0x07	; 7
    145c:	08 f4       	brcc	.+2      	; 0x1460 <DIO_voidTogglePinValue+0x18>
    145e:	77 c0       	rjmp	.+238    	; 0x154e <DIO_voidTogglePinValue+0x106>
	{
		 	switch(copy_u8PortId)
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	28 2f       	mov	r18, r24
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	3c 83       	std	Y+4, r19	; 0x04
    1468:	2b 83       	std	Y+3, r18	; 0x03
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	81 30       	cpi	r24, 0x01	; 1
    1470:	91 05       	cpc	r25, r1
    1472:	61 f1       	breq	.+88     	; 0x14cc <DIO_voidTogglePinValue+0x84>
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 05       	cpc	r19, r1
    147c:	2c f4       	brge	.+10     	; 0x1488 <DIO_voidTogglePinValue+0x40>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	00 97       	sbiw	r24, 0x00	; 0
    1484:	69 f0       	breq	.+26     	; 0x14a0 <DIO_voidTogglePinValue+0x58>
    1486:	63 c0       	rjmp	.+198    	; 0x154e <DIO_voidTogglePinValue+0x106>
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	99 f1       	breq	.+102    	; 0x14f8 <DIO_voidTogglePinValue+0xb0>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	83 30       	cpi	r24, 0x03	; 3
    1498:	91 05       	cpc	r25, r1
    149a:	09 f4       	brne	.+2      	; 0x149e <DIO_voidTogglePinValue+0x56>
    149c:	43 c0       	rjmp	.+134    	; 0x1524 <DIO_voidTogglePinValue+0xdc>
    149e:	57 c0       	rjmp	.+174    	; 0x154e <DIO_voidTogglePinValue+0x106>
			{
			case DIO_PORTA: TOGGLE_BIT(GPIOA ->PORT,copy_u8PinId); break;
    14a0:	a9 e3       	ldi	r26, 0x39	; 57
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e9 e3       	ldi	r30, 0x39	; 57
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <DIO_voidTogglePinValue+0x76>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <DIO_voidTogglePinValue+0x72>
    14c2:	84 27       	eor	r24, r20
    14c4:	12 96       	adiw	r26, 0x02	; 2
    14c6:	8c 93       	st	X, r24
    14c8:	12 97       	sbiw	r26, 0x02	; 2
    14ca:	41 c0       	rjmp	.+130    	; 0x154e <DIO_voidTogglePinValue+0x106>
			case DIO_PORTB: TOGGLE_BIT(GPIOB ->PORT,copy_u8PinId); break;
    14cc:	a6 e3       	ldi	r26, 0x36	; 54
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e6 e3       	ldi	r30, 0x36	; 54
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	82 81       	ldd	r24, Z+2	; 0x02
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <DIO_voidTogglePinValue+0xa2>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <DIO_voidTogglePinValue+0x9e>
    14ee:	84 27       	eor	r24, r20
    14f0:	12 96       	adiw	r26, 0x02	; 2
    14f2:	8c 93       	st	X, r24
    14f4:	12 97       	sbiw	r26, 0x02	; 2
    14f6:	2b c0       	rjmp	.+86     	; 0x154e <DIO_voidTogglePinValue+0x106>
			case DIO_PORTC: TOGGLE_BIT(GPIOC ->PORT,copy_u8PinId); break;
    14f8:	a3 e3       	ldi	r26, 0x33	; 51
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e3 e3       	ldi	r30, 0x33	; 51
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	82 81       	ldd	r24, Z+2	; 0x02
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <DIO_voidTogglePinValue+0xce>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <DIO_voidTogglePinValue+0xca>
    151a:	84 27       	eor	r24, r20
    151c:	12 96       	adiw	r26, 0x02	; 2
    151e:	8c 93       	st	X, r24
    1520:	12 97       	sbiw	r26, 0x02	; 2
    1522:	15 c0       	rjmp	.+42     	; 0x154e <DIO_voidTogglePinValue+0x106>
			case DIO_PORTD: TOGGLE_BIT(GPIOD ->PORT,copy_u8PinId); break;
    1524:	a0 e3       	ldi	r26, 0x30	; 48
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e0 e3       	ldi	r30, 0x30	; 48
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	82 81       	ldd	r24, Z+2	; 0x02
    152e:	48 2f       	mov	r20, r24
    1530:	8a 81       	ldd	r24, Y+2	; 0x02
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	81 e0       	ldi	r24, 0x01	; 1
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	02 2e       	mov	r0, r18
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <DIO_voidTogglePinValue+0xfa>
    153e:	88 0f       	add	r24, r24
    1540:	99 1f       	adc	r25, r25
    1542:	0a 94       	dec	r0
    1544:	e2 f7       	brpl	.-8      	; 0x153e <DIO_voidTogglePinValue+0xf6>
    1546:	84 27       	eor	r24, r20
    1548:	12 96       	adiw	r26, 0x02	; 2
    154a:	8c 93       	st	X, r24
    154c:	12 97       	sbiw	r26, 0x02	; 2
	}
	else
	{
			 /*report an error*/
	}
}
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <DIO_voidActivePinInPullUpResistance>:

void DIO_voidActivePinInPullUpResistance(u8 copy_u8PortId, u8 copy_u8PinId)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <DIO_voidActivePinInPullUpResistance+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <DIO_voidActivePinInPullUpResistance+0x8>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8PinId>=7)
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	87 30       	cpi	r24, 0x07	; 7
    1570:	08 f4       	brcc	.+2      	; 0x1574 <DIO_voidActivePinInPullUpResistance+0x18>
    1572:	c9 c0       	rjmp	.+402    	; 0x1706 <DIO_voidActivePinInPullUpResistance+0x1aa>
	{
		switch(copy_u8PortId)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	09 f4       	brne	.+2      	; 0x158a <DIO_voidActivePinInPullUpResistance+0x2e>
    1588:	41 c0       	rjmp	.+130    	; 0x160c <DIO_voidActivePinInPullUpResistance+0xb0>
    158a:	2b 81       	ldd	r18, Y+3	; 0x03
    158c:	3c 81       	ldd	r19, Y+4	; 0x04
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_voidActivePinInPullUpResistance+0x42>
    1594:	8b 81       	ldd	r24, Y+3	; 0x03
    1596:	9c 81       	ldd	r25, Y+4	; 0x04
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	71 f0       	breq	.+28     	; 0x15b8 <DIO_voidActivePinInPullUpResistance+0x5c>
    159c:	b4 c0       	rjmp	.+360    	; 0x1706 <DIO_voidActivePinInPullUpResistance+0x1aa>
    159e:	2b 81       	ldd	r18, Y+3	; 0x03
    15a0:	3c 81       	ldd	r19, Y+4	; 0x04
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	09 f4       	brne	.+2      	; 0x15aa <DIO_voidActivePinInPullUpResistance+0x4e>
    15a8:	5b c0       	rjmp	.+182    	; 0x1660 <DIO_voidActivePinInPullUpResistance+0x104>
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	83 30       	cpi	r24, 0x03	; 3
    15b0:	91 05       	cpc	r25, r1
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <DIO_voidActivePinInPullUpResistance+0x5a>
    15b4:	7f c0       	rjmp	.+254    	; 0x16b4 <DIO_voidActivePinInPullUpResistance+0x158>
    15b6:	a7 c0       	rjmp	.+334    	; 0x1706 <DIO_voidActivePinInPullUpResistance+0x1aa>
			{
			case DIO_PORTA: CLEAR_BIT(GPIOA ->DDR,copy_u8PinId); SET_BIT(GPIOA ->PORT,copy_u8PinId); break;
    15b8:	a9 e3       	ldi	r26, 0x39	; 57
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e9 e3       	ldi	r30, 0x39	; 57
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	81 81       	ldd	r24, Z+1	; 0x01
    15c2:	48 2f       	mov	r20, r24
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DIO_voidActivePinInPullUpResistance+0x78>
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25
    15d4:	2a 95       	dec	r18
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DIO_voidActivePinInPullUpResistance+0x74>
    15d8:	80 95       	com	r24
    15da:	84 23       	and	r24, r20
    15dc:	11 96       	adiw	r26, 0x01	; 1
    15de:	8c 93       	st	X, r24
    15e0:	a9 e3       	ldi	r26, 0x39	; 57
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e9 e3       	ldi	r30, 0x39	; 57
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	82 81       	ldd	r24, Z+2	; 0x02
    15ea:	48 2f       	mov	r20, r24
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	28 2f       	mov	r18, r24
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 2e       	mov	r0, r18
    15f8:	02 c0       	rjmp	.+4      	; 0x15fe <DIO_voidActivePinInPullUpResistance+0xa2>
    15fa:	88 0f       	add	r24, r24
    15fc:	99 1f       	adc	r25, r25
    15fe:	0a 94       	dec	r0
    1600:	e2 f7       	brpl	.-8      	; 0x15fa <DIO_voidActivePinInPullUpResistance+0x9e>
    1602:	84 2b       	or	r24, r20
    1604:	12 96       	adiw	r26, 0x02	; 2
    1606:	8c 93       	st	X, r24
    1608:	12 97       	sbiw	r26, 0x02	; 2
    160a:	7d c0       	rjmp	.+250    	; 0x1706 <DIO_voidActivePinInPullUpResistance+0x1aa>
			case DIO_PORTB: CLEAR_BIT(GPIOB ->DDR,copy_u8PinId); SET_BIT(GPIOB ->PORT,copy_u8PinId); break;
    160c:	a6 e3       	ldi	r26, 0x36	; 54
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e6 e3       	ldi	r30, 0x36	; 54
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	81 81       	ldd	r24, Z+1	; 0x01
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 c0       	rjmp	.+4      	; 0x1628 <DIO_voidActivePinInPullUpResistance+0xcc>
    1624:	88 0f       	add	r24, r24
    1626:	99 1f       	adc	r25, r25
    1628:	2a 95       	dec	r18
    162a:	e2 f7       	brpl	.-8      	; 0x1624 <DIO_voidActivePinInPullUpResistance+0xc8>
    162c:	80 95       	com	r24
    162e:	84 23       	and	r24, r20
    1630:	11 96       	adiw	r26, 0x01	; 1
    1632:	8c 93       	st	X, r24
    1634:	a6 e3       	ldi	r26, 0x36	; 54
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e6 e3       	ldi	r30, 0x36	; 54
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	82 81       	ldd	r24, Z+2	; 0x02
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_voidActivePinInPullUpResistance+0xf6>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_voidActivePinInPullUpResistance+0xf2>
    1656:	84 2b       	or	r24, r20
    1658:	12 96       	adiw	r26, 0x02	; 2
    165a:	8c 93       	st	X, r24
    165c:	12 97       	sbiw	r26, 0x02	; 2
    165e:	53 c0       	rjmp	.+166    	; 0x1706 <DIO_voidActivePinInPullUpResistance+0x1aa>
			case DIO_PORTC: CLEAR_BIT(GPIOC ->DDR,copy_u8PinId); SET_BIT(GPIOC ->PORT,copy_u8PinId); break;
    1660:	a3 e3       	ldi	r26, 0x33	; 51
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	e3 e3       	ldi	r30, 0x33	; 51
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	81 81       	ldd	r24, Z+1	; 0x01
    166a:	48 2f       	mov	r20, r24
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	28 2f       	mov	r18, r24
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_voidActivePinInPullUpResistance+0x120>
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	2a 95       	dec	r18
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_voidActivePinInPullUpResistance+0x11c>
    1680:	80 95       	com	r24
    1682:	84 23       	and	r24, r20
    1684:	11 96       	adiw	r26, 0x01	; 1
    1686:	8c 93       	st	X, r24
    1688:	a3 e3       	ldi	r26, 0x33	; 51
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e3 e3       	ldi	r30, 0x33	; 51
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	82 81       	ldd	r24, Z+2	; 0x02
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 2e       	mov	r0, r18
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <DIO_voidActivePinInPullUpResistance+0x14a>
    16a2:	88 0f       	add	r24, r24
    16a4:	99 1f       	adc	r25, r25
    16a6:	0a 94       	dec	r0
    16a8:	e2 f7       	brpl	.-8      	; 0x16a2 <DIO_voidActivePinInPullUpResistance+0x146>
    16aa:	84 2b       	or	r24, r20
    16ac:	12 96       	adiw	r26, 0x02	; 2
    16ae:	8c 93       	st	X, r24
    16b0:	12 97       	sbiw	r26, 0x02	; 2
    16b2:	29 c0       	rjmp	.+82     	; 0x1706 <DIO_voidActivePinInPullUpResistance+0x1aa>
			case DIO_PORTD: CLEAR_BIT(GPIOD ->DDR,copy_u8PinId); SET_BIT(GPIOD ->PORT,copy_u8PinId); break;
    16b4:	a0 e3       	ldi	r26, 0x30	; 48
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	e0 e3       	ldi	r30, 0x30	; 48
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	81 81       	ldd	r24, Z+1	; 0x01
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 c0       	rjmp	.+4      	; 0x16d0 <DIO_voidActivePinInPullUpResistance+0x174>
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	2a 95       	dec	r18
    16d2:	e2 f7       	brpl	.-8      	; 0x16cc <DIO_voidActivePinInPullUpResistance+0x170>
    16d4:	80 95       	com	r24
    16d6:	84 23       	and	r24, r20
    16d8:	11 96       	adiw	r26, 0x01	; 1
    16da:	8c 93       	st	X, r24
    16dc:	a0 e3       	ldi	r26, 0x30	; 48
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e0 e3       	ldi	r30, 0x30	; 48
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <DIO_voidActivePinInPullUpResistance+0x19e>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <DIO_voidActivePinInPullUpResistance+0x19a>
    16fe:	84 2b       	or	r24, r20
    1700:	12 96       	adiw	r26, 0x02	; 2
    1702:	8c 93       	st	X, r24
    1704:	12 97       	sbiw	r26, 0x02	; 2
	}
	else
	{
			/*report an error*/
	}
}
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <DIO_voidSetPortDirection>:

void DIO_voidSetPortDirection            (u8 copy_u8PortId, u8 copy_u8PortDirection)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	00 d0       	rcall	.+0      	; 0x171a <DIO_voidSetPortDirection+0x6>
    171a:	00 d0       	rcall	.+0      	; 0x171c <DIO_voidSetPortDirection+0x8>
    171c:	cd b7       	in	r28, 0x3d	; 61
    171e:	de b7       	in	r29, 0x3e	; 62
    1720:	89 83       	std	Y+1, r24	; 0x01
    1722:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8PortId)
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	28 2f       	mov	r18, r24
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	3c 83       	std	Y+4, r19	; 0x04
    172c:	2b 83       	std	Y+3, r18	; 0x03
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	91 05       	cpc	r25, r1
    1736:	d1 f0       	breq	.+52     	; 0x176c <DIO_voidSetPortDirection+0x58>
    1738:	2b 81       	ldd	r18, Y+3	; 0x03
    173a:	3c 81       	ldd	r19, Y+4	; 0x04
    173c:	22 30       	cpi	r18, 0x02	; 2
    173e:	31 05       	cpc	r19, r1
    1740:	2c f4       	brge	.+10     	; 0x174c <DIO_voidSetPortDirection+0x38>
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	61 f0       	breq	.+24     	; 0x1762 <DIO_voidSetPortDirection+0x4e>
    174a:	1e c0       	rjmp	.+60     	; 0x1788 <DIO_voidSetPortDirection+0x74>
    174c:	2b 81       	ldd	r18, Y+3	; 0x03
    174e:	3c 81       	ldd	r19, Y+4	; 0x04
    1750:	22 30       	cpi	r18, 0x02	; 2
    1752:	31 05       	cpc	r19, r1
    1754:	81 f0       	breq	.+32     	; 0x1776 <DIO_voidSetPortDirection+0x62>
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	9c 81       	ldd	r25, Y+4	; 0x04
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	91 05       	cpc	r25, r1
    175e:	81 f0       	breq	.+32     	; 0x1780 <DIO_voidSetPortDirection+0x6c>
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <DIO_voidSetPortDirection+0x74>
	{
		case DIO_PORTA: GPIOA -> DDR = copy_u8PortDirection; break;
    1762:	e9 e3       	ldi	r30, 0x39	; 57
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	81 83       	std	Z+1, r24	; 0x01
    176a:	0e c0       	rjmp	.+28     	; 0x1788 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTB: GPIOB -> DDR = copy_u8PortDirection; break;
    176c:	e6 e3       	ldi	r30, 0x36	; 54
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	81 83       	std	Z+1, r24	; 0x01
    1774:	09 c0       	rjmp	.+18     	; 0x1788 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTC: GPIOC -> DDR = copy_u8PortDirection; break;
    1776:	e3 e3       	ldi	r30, 0x33	; 51
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	81 83       	std	Z+1, r24	; 0x01
    177e:	04 c0       	rjmp	.+8      	; 0x1788 <DIO_voidSetPortDirection+0x74>
		case DIO_PORTD: GPIOD -> DDR = copy_u8PortDirection; break;
    1780:	e0 e3       	ldi	r30, 0x30	; 48
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	81 83       	std	Z+1, r24	; 0x01
		default: break;
		
	}
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue                (u8 copy_u8PortId, u8 copy_u8PortValue)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	00 d0       	rcall	.+0      	; 0x179c <DIO_voidSetPortValue+0x6>
    179c:	00 d0       	rcall	.+0      	; 0x179e <DIO_voidSetPortValue+0x8>
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8PortId)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3c 83       	std	Y+4, r19	; 0x04
    17ae:	2b 83       	std	Y+3, r18	; 0x03
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	9c 81       	ldd	r25, Y+4	; 0x04
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	d1 f0       	breq	.+52     	; 0x17ee <DIO_voidSetPortValue+0x58>
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	3c 81       	ldd	r19, Y+4	; 0x04
    17be:	22 30       	cpi	r18, 0x02	; 2
    17c0:	31 05       	cpc	r19, r1
    17c2:	2c f4       	brge	.+10     	; 0x17ce <DIO_voidSetPortValue+0x38>
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	61 f0       	breq	.+24     	; 0x17e4 <DIO_voidSetPortValue+0x4e>
    17cc:	1e c0       	rjmp	.+60     	; 0x180a <DIO_voidSetPortValue+0x74>
    17ce:	2b 81       	ldd	r18, Y+3	; 0x03
    17d0:	3c 81       	ldd	r19, Y+4	; 0x04
    17d2:	22 30       	cpi	r18, 0x02	; 2
    17d4:	31 05       	cpc	r19, r1
    17d6:	81 f0       	breq	.+32     	; 0x17f8 <DIO_voidSetPortValue+0x62>
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	9c 81       	ldd	r25, Y+4	; 0x04
    17dc:	83 30       	cpi	r24, 0x03	; 3
    17de:	91 05       	cpc	r25, r1
    17e0:	81 f0       	breq	.+32     	; 0x1802 <DIO_voidSetPortValue+0x6c>
    17e2:	13 c0       	rjmp	.+38     	; 0x180a <DIO_voidSetPortValue+0x74>
	{
		case DIO_PORTA: GPIOA -> PORT = copy_u8PortValue; break;
    17e4:	e9 e3       	ldi	r30, 0x39	; 57
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	82 83       	std	Z+2, r24	; 0x02
    17ec:	0e c0       	rjmp	.+28     	; 0x180a <DIO_voidSetPortValue+0x74>
		case DIO_PORTB: GPIOB -> PORT = copy_u8PortValue; break;
    17ee:	e6 e3       	ldi	r30, 0x36	; 54
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	8a 81       	ldd	r24, Y+2	; 0x02
    17f4:	82 83       	std	Z+2, r24	; 0x02
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <DIO_voidSetPortValue+0x74>
		case DIO_PORTC: GPIOC -> PORT = copy_u8PortValue; break;
    17f8:	e3 e3       	ldi	r30, 0x33	; 51
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	82 83       	std	Z+2, r24	; 0x02
    1800:	04 c0       	rjmp	.+8      	; 0x180a <DIO_voidSetPortValue+0x74>
		case DIO_PORTD: GPIOD -> PORT = copy_u8PortValue; break;
    1802:	e0 e3       	ldi	r30, 0x30	; 48
    1804:	f0 e0       	ldi	r31, 0x00	; 0
    1806:	8a 81       	ldd	r24, Y+2	; 0x02
    1808:	82 83       	std	Z+2, r24	; 0x02
		default: break;
		
	}
	
}
    180a:	0f 90       	pop	r0
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	cf 91       	pop	r28
    1814:	df 91       	pop	r29
    1816:	08 95       	ret

00001818 <DIO_voidGetPortValue>:
void DIO_voidGetPortValue                (u8 copy_u8PortId, u8* copy_pu8PortValue)
{
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	00 d0       	rcall	.+0      	; 0x181e <DIO_voidGetPortValue+0x6>
    181e:	00 d0       	rcall	.+0      	; 0x1820 <DIO_voidGetPortValue+0x8>
    1820:	0f 92       	push	r0
    1822:	cd b7       	in	r28, 0x3d	; 61
    1824:	de b7       	in	r29, 0x3e	; 62
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	7b 83       	std	Y+3, r23	; 0x03
    182a:	6a 83       	std	Y+2, r22	; 0x02
		switch(copy_u8PortId)
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	28 2f       	mov	r18, r24
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	3d 83       	std	Y+5, r19	; 0x05
    1834:	2c 83       	std	Y+4, r18	; 0x04
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	9d 81       	ldd	r25, Y+5	; 0x05
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	e1 f0       	breq	.+56     	; 0x1878 <DIO_voidGetPortValue+0x60>
    1840:	2c 81       	ldd	r18, Y+4	; 0x04
    1842:	3d 81       	ldd	r19, Y+5	; 0x05
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	2c f4       	brge	.+10     	; 0x1854 <DIO_voidGetPortValue+0x3c>
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	9d 81       	ldd	r25, Y+5	; 0x05
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	61 f0       	breq	.+24     	; 0x186a <DIO_voidGetPortValue+0x52>
    1852:	26 c0       	rjmp	.+76     	; 0x18a0 <DIO_voidGetPortValue+0x88>
    1854:	2c 81       	ldd	r18, Y+4	; 0x04
    1856:	3d 81       	ldd	r19, Y+5	; 0x05
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	a1 f0       	breq	.+40     	; 0x1886 <DIO_voidGetPortValue+0x6e>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	83 30       	cpi	r24, 0x03	; 3
    1864:	91 05       	cpc	r25, r1
    1866:	b1 f0       	breq	.+44     	; 0x1894 <DIO_voidGetPortValue+0x7c>
    1868:	1b c0       	rjmp	.+54     	; 0x18a0 <DIO_voidGetPortValue+0x88>
	{
		case DIO_PORTA: * copy_pu8PortValue = GPIOA -> PIN; break;
    186a:	e9 e3       	ldi	r30, 0x39	; 57
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	ea 81       	ldd	r30, Y+2	; 0x02
    1872:	fb 81       	ldd	r31, Y+3	; 0x03
    1874:	80 83       	st	Z, r24
    1876:	14 c0       	rjmp	.+40     	; 0x18a0 <DIO_voidGetPortValue+0x88>
		case DIO_PORTB: * copy_pu8PortValue = GPIOB -> PIN; break;
    1878:	e6 e3       	ldi	r30, 0x36	; 54
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	ea 81       	ldd	r30, Y+2	; 0x02
    1880:	fb 81       	ldd	r31, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
    1884:	0d c0       	rjmp	.+26     	; 0x18a0 <DIO_voidGetPortValue+0x88>
		case DIO_PORTC: * copy_pu8PortValue = GPIOC -> PIN; break;
    1886:	e3 e3       	ldi	r30, 0x33	; 51
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	ea 81       	ldd	r30, Y+2	; 0x02
    188e:	fb 81       	ldd	r31, Y+3	; 0x03
    1890:	80 83       	st	Z, r24
    1892:	06 c0       	rjmp	.+12     	; 0x18a0 <DIO_voidGetPortValue+0x88>
		case DIO_PORTD: * copy_pu8PortValue = GPIOD -> PIN; break;
    1894:	e0 e3       	ldi	r30, 0x30	; 48
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	ea 81       	ldd	r30, Y+2	; 0x02
    189c:	fb 81       	ldd	r31, Y+3	; 0x03
    189e:	80 83       	st	Z, r24
		default: break;
		
	}
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <DIO_voidTogglePortValue>:

void DIO_voidTogglePortValue             (u8 copy_u8PortId)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	00 d0       	rcall	.+0      	; 0x18b6 <DIO_voidTogglePortValue+0x6>
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	89 83       	std	Y+1, r24	; 0x01
	
		switch(copy_u8PortId)
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	3b 83       	std	Y+3, r19	; 0x03
    18c6:	2a 83       	std	Y+2, r18	; 0x02
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	9b 81       	ldd	r25, Y+3	; 0x03
    18cc:	81 30       	cpi	r24, 0x01	; 1
    18ce:	91 05       	cpc	r25, r1
    18d0:	f9 f0       	breq	.+62     	; 0x1910 <DIO_voidTogglePortValue+0x60>
    18d2:	2a 81       	ldd	r18, Y+2	; 0x02
    18d4:	3b 81       	ldd	r19, Y+3	; 0x03
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	2c f4       	brge	.+10     	; 0x18e6 <DIO_voidTogglePortValue+0x36>
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	9b 81       	ldd	r25, Y+3	; 0x03
    18e0:	00 97       	sbiw	r24, 0x00	; 0
    18e2:	61 f0       	breq	.+24     	; 0x18fc <DIO_voidTogglePortValue+0x4c>
    18e4:	32 c0       	rjmp	.+100    	; 0x194a <DIO_voidTogglePortValue+0x9a>
    18e6:	2a 81       	ldd	r18, Y+2	; 0x02
    18e8:	3b 81       	ldd	r19, Y+3	; 0x03
    18ea:	22 30       	cpi	r18, 0x02	; 2
    18ec:	31 05       	cpc	r19, r1
    18ee:	d1 f0       	breq	.+52     	; 0x1924 <DIO_voidTogglePortValue+0x74>
    18f0:	8a 81       	ldd	r24, Y+2	; 0x02
    18f2:	9b 81       	ldd	r25, Y+3	; 0x03
    18f4:	83 30       	cpi	r24, 0x03	; 3
    18f6:	91 05       	cpc	r25, r1
    18f8:	f9 f0       	breq	.+62     	; 0x1938 <DIO_voidTogglePortValue+0x88>
    18fa:	27 c0       	rjmp	.+78     	; 0x194a <DIO_voidTogglePortValue+0x9a>
	{
		case DIO_PORTA: GPIOA -> PORT^= DIO_PORT_HIGH; break;
    18fc:	a9 e3       	ldi	r26, 0x39	; 57
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e9 e3       	ldi	r30, 0x39	; 57
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	82 81       	ldd	r24, Z+2	; 0x02
    1906:	80 95       	com	r24
    1908:	12 96       	adiw	r26, 0x02	; 2
    190a:	8c 93       	st	X, r24
    190c:	12 97       	sbiw	r26, 0x02	; 2
    190e:	1d c0       	rjmp	.+58     	; 0x194a <DIO_voidTogglePortValue+0x9a>
		case DIO_PORTB: GPIOB -> PORT^= DIO_PORT_HIGH; break;
    1910:	a6 e3       	ldi	r26, 0x36	; 54
    1912:	b0 e0       	ldi	r27, 0x00	; 0
    1914:	e6 e3       	ldi	r30, 0x36	; 54
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	80 95       	com	r24
    191c:	12 96       	adiw	r26, 0x02	; 2
    191e:	8c 93       	st	X, r24
    1920:	12 97       	sbiw	r26, 0x02	; 2
    1922:	13 c0       	rjmp	.+38     	; 0x194a <DIO_voidTogglePortValue+0x9a>
		case DIO_PORTC: GPIOC -> PORT^= DIO_PORT_HIGH; break;
    1924:	a3 e3       	ldi	r26, 0x33	; 51
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	e3 e3       	ldi	r30, 0x33	; 51
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	80 95       	com	r24
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	8c 93       	st	X, r24
    1934:	12 97       	sbiw	r26, 0x02	; 2
    1936:	09 c0       	rjmp	.+18     	; 0x194a <DIO_voidTogglePortValue+0x9a>
		case DIO_PORTD: GPIOD -> PORT^= DIO_PORT_HIGH; break;
    1938:	a0 e3       	ldi	r26, 0x30	; 48
    193a:	b0 e0       	ldi	r27, 0x00	; 0
    193c:	e0 e3       	ldi	r30, 0x30	; 48
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	82 81       	ldd	r24, Z+2	; 0x02
    1942:	80 95       	com	r24
    1944:	12 96       	adiw	r26, 0x02	; 2
    1946:	8c 93       	st	X, r24
    1948:	12 97       	sbiw	r26, 0x02	; 2
		default: break;
		
	}

}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <DIO_voidActivePortInPullUpResistance>:
void DIO_voidActivePortInPullUpResistance(u8 copy_u8PortId)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <DIO_voidActivePortInPullUpResistance+0x6>
    195c:	0f 92       	push	r0
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	89 83       	std	Y+1, r24	; 0x01
			switch(copy_u8PortId)
    1964:	89 81       	ldd	r24, Y+1	; 0x01
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	3b 83       	std	Y+3, r19	; 0x03
    196c:	2a 83       	std	Y+2, r18	; 0x02
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	9b 81       	ldd	r25, Y+3	; 0x03
    1972:	81 30       	cpi	r24, 0x01	; 1
    1974:	91 05       	cpc	r25, r1
    1976:	d1 f0       	breq	.+52     	; 0x19ac <DIO_voidActivePortInPullUpResistance+0x56>
    1978:	2a 81       	ldd	r18, Y+2	; 0x02
    197a:	3b 81       	ldd	r19, Y+3	; 0x03
    197c:	22 30       	cpi	r18, 0x02	; 2
    197e:	31 05       	cpc	r19, r1
    1980:	2c f4       	brge	.+10     	; 0x198c <DIO_voidActivePortInPullUpResistance+0x36>
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	61 f0       	breq	.+24     	; 0x19a2 <DIO_voidActivePortInPullUpResistance+0x4c>
    198a:	1e c0       	rjmp	.+60     	; 0x19c8 <DIO_voidActivePortInPullUpResistance+0x72>
    198c:	2a 81       	ldd	r18, Y+2	; 0x02
    198e:	3b 81       	ldd	r19, Y+3	; 0x03
    1990:	22 30       	cpi	r18, 0x02	; 2
    1992:	31 05       	cpc	r19, r1
    1994:	81 f0       	breq	.+32     	; 0x19b6 <DIO_voidActivePortInPullUpResistance+0x60>
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	9b 81       	ldd	r25, Y+3	; 0x03
    199a:	83 30       	cpi	r24, 0x03	; 3
    199c:	91 05       	cpc	r25, r1
    199e:	81 f0       	breq	.+32     	; 0x19c0 <DIO_voidActivePortInPullUpResistance+0x6a>
    19a0:	13 c0       	rjmp	.+38     	; 0x19c8 <DIO_voidActivePortInPullUpResistance+0x72>
	{
		case DIO_PORTA: GPIOA -> PORT = DIO_PORT_HIGH; break;
    19a2:	e9 e3       	ldi	r30, 0x39	; 57
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8f ef       	ldi	r24, 0xFF	; 255
    19a8:	82 83       	std	Z+2, r24	; 0x02
    19aa:	0e c0       	rjmp	.+28     	; 0x19c8 <DIO_voidActivePortInPullUpResistance+0x72>
		case DIO_PORTB: GPIOB -> PORT = DIO_PORT_HIGH; break;
    19ac:	e6 e3       	ldi	r30, 0x36	; 54
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8f ef       	ldi	r24, 0xFF	; 255
    19b2:	82 83       	std	Z+2, r24	; 0x02
    19b4:	09 c0       	rjmp	.+18     	; 0x19c8 <DIO_voidActivePortInPullUpResistance+0x72>
		case DIO_PORTC: GPIOC -> PORT = DIO_PORT_HIGH; break;
    19b6:	e3 e3       	ldi	r30, 0x33	; 51
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8f ef       	ldi	r24, 0xFF	; 255
    19bc:	82 83       	std	Z+2, r24	; 0x02
    19be:	04 c0       	rjmp	.+8      	; 0x19c8 <DIO_voidActivePortInPullUpResistance+0x72>
		case DIO_PORTD: GPIOD -> PORT = DIO_PORT_HIGH; break;
    19c0:	e0 e3       	ldi	r30, 0x30	; 48
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	8f ef       	ldi	r24, 0xFF	; 255
    19c6:	82 83       	std	Z+2, r24	; 0x02
		default: break;
		
	}
}
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <KPD_init>:
							{'4','5','6','*'},
							{'1','2','3','-'},
							{'C','0','=','+'} };

void KPD_init(void)
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <KPD_init+0x6>
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
	//R0->R3 (rows)    //b0->b3 //0x0f
	//C0->C3 (columns) //b4->b7 //0xf0

	/*rows input*/
	for (u8 i=0;i<4;i++)
    19de:	1a 82       	std	Y+2, r1	; 0x02
    19e0:	08 c0       	rjmp	.+16     	; 0x19f2 <KPD_init+0x1e>
	{
		DIO_voidSetPinDirection(KPD_ROW_PORT, i, DIO_PIN_INPUT);
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	6a 81       	ldd	r22, Y+2	; 0x02
    19e6:	40 e0       	ldi	r20, 0x00	; 0
    19e8:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
{
	//R0->R3 (rows)    //b0->b3 //0x0f
	//C0->C3 (columns) //b4->b7 //0xf0

	/*rows input*/
	for (u8 i=0;i<4;i++)
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	8a 83       	std	Y+2, r24	; 0x02
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	a8 f3       	brcs	.-22     	; 0x19e2 <KPD_init+0xe>
	{
		DIO_voidSetPinDirection(KPD_ROW_PORT, i, DIO_PIN_INPUT);
	}
	/*col output*/
	for (u8 i=4;i<8;i++)
    19f8:	84 e0       	ldi	r24, 0x04	; 4
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	08 c0       	rjmp	.+16     	; 0x1a0e <KPD_init+0x3a>
	{
		DIO_voidSetPinDirection(KPD_COL_PORT, i, DIO_PIN_OUTPUT);
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	69 81       	ldd	r22, Y+1	; 0x01
    1a02:	41 e0       	ldi	r20, 0x01	; 1
    1a04:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	for (u8 i=0;i<4;i++)
	{
		DIO_voidSetPinDirection(KPD_ROW_PORT, i, DIO_PIN_INPUT);
	}
	/*col output*/
	for (u8 i=4;i<8;i++)
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	8f 5f       	subi	r24, 0xFF	; 255
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	88 30       	cpi	r24, 0x08	; 8
    1a12:	a8 f3       	brcs	.-22     	; 0x19fe <KPD_init+0x2a>
	{
		DIO_voidSetPinDirection(KPD_COL_PORT, i, DIO_PIN_OUTPUT);
	}
	/*Output high & input pull-up*/
	DIO_voidSetPortValue(KPD_COL_PORT, 0xFF);
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	6f ef       	ldi	r22, 0xFF	; 255
    1a18:	0e 94 cb 0b 	call	0x1796	; 0x1796 <DIO_voidSetPortValue>
}
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	cf 91       	pop	r28
    1a22:	df 91       	pop	r29
    1a24:	08 95       	ret

00001a26 <KPD_GetPressedKey>:

u8 KPD_GetPressedKey(void)
{
    1a26:	df 93       	push	r29
    1a28:	cf 93       	push	r28
    1a2a:	cd b7       	in	r28, 0x3d	; 61
    1a2c:	de b7       	in	r29, 0x3e	; 62
    1a2e:	62 97       	sbiw	r28, 0x12	; 18
    1a30:	0f b6       	in	r0, 0x3f	; 63
    1a32:	f8 94       	cli
    1a34:	de bf       	out	0x3e, r29	; 62
    1a36:	0f be       	out	0x3f, r0	; 63
    1a38:	cd bf       	out	0x3d, r28	; 61
	u8 KeyValue = 1;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	8a 8b       	std	Y+18, r24	; 0x12
	u8 ReturnKeyPressed = 0;
    1a3e:	19 8a       	std	Y+17, r1	; 0x11

	for(u8 col = KPD_C0 ; col <= KPD_C3 ; col++)  //4 to 7
    1a40:	84 e0       	ldi	r24, 0x04	; 4
    1a42:	88 8b       	std	Y+16, r24	; 0x10
    1a44:	b5 c0       	rjmp	.+362    	; 0x1bb0 <KPD_GetPressedKey+0x18a>
	{
		DIO_voidSetPinValue(KPD_COL_PORT, col , DIO_PIN_LOW);
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	68 89       	ldd	r22, Y+16	; 0x10
    1a4a:	40 e0       	ldi	r20, 0x00	; 0
    1a4c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>

		for(u8 row = KPD_R0;  row <= KPD_R3 ; row++ )//0 to 3
    1a50:	1f 86       	std	Y+15, r1	; 0x0f
    1a52:	a2 c0       	rjmp	.+324    	; 0x1b98 <KPD_GetPressedKey+0x172>
		{
			DIO_voidGetPinValue(KPD_ROW_PORT, row ,&KeyValue);
    1a54:	9e 01       	movw	r18, r28
    1a56:	2e 5e       	subi	r18, 0xEE	; 238
    1a58:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a5e:	a9 01       	movw	r20, r18
    1a60:	0e 94 9c 09 	call	0x1338	; 0x1338 <DIO_voidGetPinValue>

			if(KeyValue==0)  //If key is pressed
    1a64:	8a 89       	ldd	r24, Y+18	; 0x12
    1a66:	88 23       	and	r24, r24
    1a68:	09 f0       	breq	.+2      	; 0x1a6c <KPD_GetPressedKey+0x46>
    1a6a:	93 c0       	rjmp	.+294    	; 0x1b92 <KPD_GetPressedKey+0x16c>
			{
				ReturnKeyPressed=KPD_Arr[row-KPD_R0][col-KPD_C0];	//get the arr
    1a6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a6e:	48 2f       	mov	r20, r24
    1a70:	50 e0       	ldi	r21, 0x00	; 0
    1a72:	88 89       	ldd	r24, Y+16	; 0x10
    1a74:	88 2f       	mov	r24, r24
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9c 01       	movw	r18, r24
    1a7a:	24 50       	subi	r18, 0x04	; 4
    1a7c:	30 40       	sbci	r19, 0x00	; 0
    1a7e:	ca 01       	movw	r24, r20
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	88 0f       	add	r24, r24
    1a86:	99 1f       	adc	r25, r25
    1a88:	82 0f       	add	r24, r18
    1a8a:	93 1f       	adc	r25, r19
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	e0 58       	subi	r30, 0x80	; 128
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	80 81       	ld	r24, Z
    1a94:	89 8b       	std	Y+17, r24	; 0x11
    1a96:	80 e0       	ldi	r24, 0x00	; 0
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	a8 e4       	ldi	r26, 0x48	; 72
    1a9c:	b2 e4       	ldi	r27, 0x42	; 66
    1a9e:	8b 87       	std	Y+11, r24	; 0x0b
    1aa0:	9c 87       	std	Y+12, r25	; 0x0c
    1aa2:	ad 87       	std	Y+13, r26	; 0x0d
    1aa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8f 83       	std	Y+7, r24	; 0x07
    1ac0:	98 87       	std	Y+8, r25	; 0x08
    1ac2:	a9 87       	std	Y+9, r26	; 0x09
    1ac4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac8:	78 85       	ldd	r23, Y+8	; 0x08
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <KPD_GetPressedKey+0xc2>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <KPD_GetPressedKey+0x140>
	else if (__tmp > 65535)
    1ae8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aea:	78 85       	ldd	r23, Y+8	; 0x08
    1aec:	89 85       	ldd	r24, Y+9	; 0x09
    1aee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <KPD_GetPressedKey+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <KPD_GetPressedKey+0x122>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9c 83       	std	Y+4, r25	; 0x04
    1b30:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	9c 81       	ldd	r25, Y+4	; 0x04
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <KPD_GetPressedKey+0x110>
    1b3a:	9c 83       	std	Y+4, r25	; 0x04
    1b3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9e 83       	std	Y+6, r25	; 0x06
    1b46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8d 81       	ldd	r24, Y+5	; 0x05
    1b4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <KPD_GetPressedKey+0x104>
    1b50:	1d c0       	rjmp	.+58     	; 0x1b8c <KPD_GetPressedKey+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6f 81       	ldd	r22, Y+7	; 0x07
    1b54:	78 85       	ldd	r23, Y+8	; 0x08
    1b56:	89 85       	ldd	r24, Y+9	; 0x09
    1b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9e 83       	std	Y+6, r25	; 0x06
    1b64:	8d 83       	std	Y+5, r24	; 0x05
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	9a 83       	std	Y+2, r25	; 0x02
    1b6c:	89 83       	std	Y+1, r24	; 0x01
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	9a 81       	ldd	r25, Y+2	; 0x02
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <KPD_GetPressedKey+0x14c>
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	08 c0       	rjmp	.+16     	; 0x1b8c <KPD_GetPressedKey+0x166>
				_delay_ms(50);
				while(KeyValue==0) 	//get stuck in while as long as key is pressed
				{
					DIO_voidGetPinValue(KPD_ROW_PORT, row ,&KeyValue);
    1b7c:	9e 01       	movw	r18, r28
    1b7e:	2e 5e       	subi	r18, 0xEE	; 238
    1b80:	3f 4f       	sbci	r19, 0xFF	; 255
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b86:	a9 01       	movw	r20, r18
    1b88:	0e 94 9c 09 	call	0x1338	; 0x1338 <DIO_voidGetPinValue>

			if(KeyValue==0)  //If key is pressed
			{
				ReturnKeyPressed=KPD_Arr[row-KPD_R0][col-KPD_C0];	//get the arr
				_delay_ms(50);
				while(KeyValue==0) 	//get stuck in while as long as key is pressed
    1b8c:	8a 89       	ldd	r24, Y+18	; 0x12
    1b8e:	88 23       	and	r24, r24
    1b90:	a9 f3       	breq	.-22     	; 0x1b7c <KPD_GetPressedKey+0x156>

	for(u8 col = KPD_C0 ; col <= KPD_C3 ; col++)  //4 to 7
	{
		DIO_voidSetPinValue(KPD_COL_PORT, col , DIO_PIN_LOW);

		for(u8 row = KPD_R0;  row <= KPD_R3 ; row++ )//0 to 3
    1b92:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b94:	8f 5f       	subi	r24, 0xFF	; 255
    1b96:	8f 87       	std	Y+15, r24	; 0x0f
    1b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9a:	84 30       	cpi	r24, 0x04	; 4
    1b9c:	08 f4       	brcc	.+2      	; 0x1ba0 <KPD_GetPressedKey+0x17a>
    1b9e:	5a cf       	rjmp	.-332    	; 0x1a54 <KPD_GetPressedKey+0x2e>
				}
			}


		}
		DIO_voidSetPinValue(KPD_COL_PORT,col,DIO_PIN_HIGH);
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	68 89       	ldd	r22, Y+16	; 0x10
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
u8 KPD_GetPressedKey(void)
{
	u8 KeyValue = 1;
	u8 ReturnKeyPressed = 0;

	for(u8 col = KPD_C0 ; col <= KPD_C3 ; col++)  //4 to 7
    1baa:	88 89       	ldd	r24, Y+16	; 0x10
    1bac:	8f 5f       	subi	r24, 0xFF	; 255
    1bae:	88 8b       	std	Y+16, r24	; 0x10
    1bb0:	88 89       	ldd	r24, Y+16	; 0x10
    1bb2:	88 30       	cpi	r24, 0x08	; 8
    1bb4:	08 f4       	brcc	.+2      	; 0x1bb8 <KPD_GetPressedKey+0x192>
    1bb6:	47 cf       	rjmp	.-370    	; 0x1a46 <KPD_GetPressedKey+0x20>

		}
		DIO_voidSetPinValue(KPD_COL_PORT,col,DIO_PIN_HIGH);

	}
	return ReturnKeyPressed;
    1bb8:	89 89       	ldd	r24, Y+17	; 0x11
}
    1bba:	62 96       	adiw	r28, 0x12	; 18
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	cf 91       	pop	r28
    1bc8:	df 91       	pop	r29
    1bca:	08 95       	ret

00001bcc <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidInit(void)
{
    1bcc:	df 93       	push	r29
    1bce:	cf 93       	push	r28
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	e8 97       	sbiw	r28, 0x38	; 56
    1bd6:	0f b6       	in	r0, 0x3f	; 63
    1bd8:	f8 94       	cli
    1bda:	de bf       	out	0x3e, r29	; 62
    1bdc:	0f be       	out	0x3f, r0	; 63
    1bde:	cd bf       	out	0x3d, r28	; 61
	/*control pins*/
	DIO_voidSetPinDirection(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_OUTPUT);
    1be0:	82 e0       	ldi	r24, 0x02	; 2
    1be2:	62 e0       	ldi	r22, 0x02	; 2
    1be4:	41 e0       	ldi	r20, 0x01	; 1
    1be6:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Ctrl_Port,LCD_RS_Pin,DIO_PIN_OUTPUT);
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	41 e0       	ldi	r20, 0x01	; 1
    1bf0:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Ctrl_Port,LCD_RW_Pin,DIO_PIN_OUTPUT);
    1bf4:	82 e0       	ldi	r24, 0x02	; 2
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	41 e0       	ldi	r20, 0x01	; 1
    1bfa:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	/*4bit or 8bit data initialization */


	#if LCD_MODE == LCD_4_BIT
	/*choose the 4 bits of data*/
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin4,DIO_PIN_OUTPUT);
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	41 e0       	ldi	r20, 0x01	; 1
    1c04:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin5,DIO_PIN_OUTPUT);
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    1c0a:	61 e0       	ldi	r22, 0x01	; 1
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin6,DIO_PIN_OUTPUT);
    1c12:	83 e0       	ldi	r24, 0x03	; 3
    1c14:	62 e0       	ldi	r22, 0x02	; 2
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_Data_Port,LCD_4Bit_Pin7,DIO_PIN_OUTPUT);
    1c1c:	83 e0       	ldi	r24, 0x03	; 3
    1c1e:	63 e0       	ldi	r22, 0x03	; 3
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	a0 e2       	ldi	r26, 0x20	; 32
    1c2c:	b2 e4       	ldi	r27, 0x42	; 66
    1c2e:	8d ab       	std	Y+53, r24	; 0x35
    1c30:	9e ab       	std	Y+54, r25	; 0x36
    1c32:	af ab       	std	Y+55, r26	; 0x37
    1c34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c36:	6d a9       	ldd	r22, Y+53	; 0x35
    1c38:	7e a9       	ldd	r23, Y+54	; 0x36
    1c3a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c3e:	20 e0       	ldi	r18, 0x00	; 0
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	4a ef       	ldi	r20, 0xFA	; 250
    1c44:	54 e4       	ldi	r21, 0x44	; 68
    1c46:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	89 ab       	std	Y+49, r24	; 0x31
    1c50:	9a ab       	std	Y+50, r25	; 0x32
    1c52:	ab ab       	std	Y+51, r26	; 0x33
    1c54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c56:	69 a9       	ldd	r22, Y+49	; 0x31
    1c58:	7a a9       	ldd	r23, Y+50	; 0x32
    1c5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5e:	20 e0       	ldi	r18, 0x00	; 0
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	40 e8       	ldi	r20, 0x80	; 128
    1c64:	5f e3       	ldi	r21, 0x3F	; 63
    1c66:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c6a:	88 23       	and	r24, r24
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <LCD_voidInit+0xac>
		__ticks = 1;
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	98 ab       	std	Y+48, r25	; 0x30
    1c74:	8f a7       	std	Y+47, r24	; 0x2f
    1c76:	3f c0       	rjmp	.+126    	; 0x1cf6 <LCD_voidInit+0x12a>
	else if (__tmp > 65535)
    1c78:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1c7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1c7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	3f ef       	ldi	r19, 0xFF	; 255
    1c84:	4f e7       	ldi	r20, 0x7F	; 127
    1c86:	57 e4       	ldi	r21, 0x47	; 71
    1c88:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c8c:	18 16       	cp	r1, r24
    1c8e:	4c f5       	brge	.+82     	; 0x1ce2 <LCD_voidInit+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c90:	6d a9       	ldd	r22, Y+53	; 0x35
    1c92:	7e a9       	ldd	r23, Y+54	; 0x36
    1c94:	8f a9       	ldd	r24, Y+55	; 0x37
    1c96:	98 ad       	ldd	r25, Y+56	; 0x38
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	40 e2       	ldi	r20, 0x20	; 32
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	98 ab       	std	Y+48, r25	; 0x30
    1cb6:	8f a7       	std	Y+47, r24	; 0x2f
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <LCD_voidInit+0x10c>
    1cba:	88 ec       	ldi	r24, 0xC8	; 200
    1cbc:	90 e0       	ldi	r25, 0x00	; 0
    1cbe:	9e a7       	std	Y+46, r25	; 0x2e
    1cc0:	8d a7       	std	Y+45, r24	; 0x2d
    1cc2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cc4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	f1 f7       	brne	.-4      	; 0x1cc6 <LCD_voidInit+0xfa>
    1cca:	9e a7       	std	Y+46, r25	; 0x2e
    1ccc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd2:	01 97       	sbiw	r24, 0x01	; 1
    1cd4:	98 ab       	std	Y+48, r25	; 0x30
    1cd6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cda:	98 a9       	ldd	r25, Y+48	; 0x30
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	69 f7       	brne	.-38     	; 0x1cba <LCD_voidInit+0xee>
    1ce0:	14 c0       	rjmp	.+40     	; 0x1d0a <LCD_voidInit+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ce2:	69 a9       	ldd	r22, Y+49	; 0x31
    1ce4:	7a a9       	ldd	r23, Y+50	; 0x32
    1ce6:	8b a9       	ldd	r24, Y+51	; 0x33
    1ce8:	9c a9       	ldd	r25, Y+52	; 0x34
    1cea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	98 ab       	std	Y+48, r25	; 0x30
    1cf4:	8f a7       	std	Y+47, r24	; 0x2f
    1cf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf8:	98 a9       	ldd	r25, Y+48	; 0x30
    1cfa:	9c a7       	std	Y+44, r25	; 0x2c
    1cfc:	8b a7       	std	Y+43, r24	; 0x2b
    1cfe:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d00:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_voidInit+0x136>
    1d06:	9c a7       	std	Y+44, r25	; 0x2c
    1d08:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	LCD_voidWriteCmd(0x33);
    1d0a:	83 e3       	ldi	r24, 0x33	; 51
    1d0c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
	LCD_voidWriteCmd(0x32);
    1d10:	82 e3       	ldi	r24, 0x32	; 50
    1d12:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
	LCD_voidWriteCmd(0x28);
    1d16:	88 e2       	ldi	r24, 0x28	; 40
    1d18:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	a0 e8       	ldi	r26, 0x80	; 128
    1d22:	bf e3       	ldi	r27, 0x3F	; 63
    1d24:	8f a3       	std	Y+39, r24	; 0x27
    1d26:	98 a7       	std	Y+40, r25	; 0x28
    1d28:	a9 a7       	std	Y+41, r26	; 0x29
    1d2a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1d2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1d30:	89 a5       	ldd	r24, Y+41	; 0x29
    1d32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	4a ef       	ldi	r20, 0xFA	; 250
    1d3a:	54 e4       	ldi	r21, 0x44	; 68
    1d3c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8b a3       	std	Y+35, r24	; 0x23
    1d46:	9c a3       	std	Y+36, r25	; 0x24
    1d48:	ad a3       	std	Y+37, r26	; 0x25
    1d4a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d50:	8d a1       	ldd	r24, Y+37	; 0x25
    1d52:	9e a1       	ldd	r25, Y+38	; 0x26
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	40 e8       	ldi	r20, 0x80	; 128
    1d5a:	5f e3       	ldi	r21, 0x3F	; 63
    1d5c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d60:	88 23       	and	r24, r24
    1d62:	2c f4       	brge	.+10     	; 0x1d6e <LCD_voidInit+0x1a2>
		__ticks = 1;
    1d64:	81 e0       	ldi	r24, 0x01	; 1
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	9a a3       	std	Y+34, r25	; 0x22
    1d6a:	89 a3       	std	Y+33, r24	; 0x21
    1d6c:	3f c0       	rjmp	.+126    	; 0x1dec <LCD_voidInit+0x220>
	else if (__tmp > 65535)
    1d6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d70:	7c a1       	ldd	r23, Y+36	; 0x24
    1d72:	8d a1       	ldd	r24, Y+37	; 0x25
    1d74:	9e a1       	ldd	r25, Y+38	; 0x26
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	3f ef       	ldi	r19, 0xFF	; 255
    1d7a:	4f e7       	ldi	r20, 0x7F	; 127
    1d7c:	57 e4       	ldi	r21, 0x47	; 71
    1d7e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d82:	18 16       	cp	r1, r24
    1d84:	4c f5       	brge	.+82     	; 0x1dd8 <LCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d86:	6f a1       	ldd	r22, Y+39	; 0x27
    1d88:	78 a5       	ldd	r23, Y+40	; 0x28
    1d8a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d8c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	40 e2       	ldi	r20, 0x20	; 32
    1d94:	51 e4       	ldi	r21, 0x41	; 65
    1d96:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	bc 01       	movw	r22, r24
    1da0:	cd 01       	movw	r24, r26
    1da2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9a a3       	std	Y+34, r25	; 0x22
    1dac:	89 a3       	std	Y+33, r24	; 0x21
    1dae:	0f c0       	rjmp	.+30     	; 0x1dce <LCD_voidInit+0x202>
    1db0:	88 ec       	ldi	r24, 0xC8	; 200
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	98 a3       	std	Y+32, r25	; 0x20
    1db6:	8f 8f       	std	Y+31, r24	; 0x1f
    1db8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dba:	98 a1       	ldd	r25, Y+32	; 0x20
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_voidInit+0x1f0>
    1dc0:	98 a3       	std	Y+32, r25	; 0x20
    1dc2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc4:	89 a1       	ldd	r24, Y+33	; 0x21
    1dc6:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	9a a3       	std	Y+34, r25	; 0x22
    1dcc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dce:	89 a1       	ldd	r24, Y+33	; 0x21
    1dd0:	9a a1       	ldd	r25, Y+34	; 0x22
    1dd2:	00 97       	sbiw	r24, 0x00	; 0
    1dd4:	69 f7       	brne	.-38     	; 0x1db0 <LCD_voidInit+0x1e4>
    1dd6:	14 c0       	rjmp	.+40     	; 0x1e00 <LCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dda:	7c a1       	ldd	r23, Y+36	; 0x24
    1ddc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dde:	9e a1       	ldd	r25, Y+38	; 0x26
    1de0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	9a a3       	std	Y+34, r25	; 0x22
    1dea:	89 a3       	std	Y+33, r24	; 0x21
    1dec:	89 a1       	ldd	r24, Y+33	; 0x21
    1dee:	9a a1       	ldd	r25, Y+34	; 0x22
    1df0:	9e 8f       	std	Y+30, r25	; 0x1e
    1df2:	8d 8f       	std	Y+29, r24	; 0x1d
    1df4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1df6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	f1 f7       	brne	.-4      	; 0x1df8 <LCD_voidInit+0x22c>
    1dfc:	9e 8f       	std	Y+30, r25	; 0x1e
    1dfe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_voidWriteCmd(0x0E);
    1e00:	8e e0       	ldi	r24, 0x0E	; 14
    1e02:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
    1e06:	80 e0       	ldi	r24, 0x00	; 0
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	a0 e8       	ldi	r26, 0x80	; 128
    1e0c:	bf e3       	ldi	r27, 0x3F	; 63
    1e0e:	89 8f       	std	Y+25, r24	; 0x19
    1e10:	9a 8f       	std	Y+26, r25	; 0x1a
    1e12:	ab 8f       	std	Y+27, r26	; 0x1b
    1e14:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e16:	69 8d       	ldd	r22, Y+25	; 0x19
    1e18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1e:	20 e0       	ldi	r18, 0x00	; 0
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	4a ef       	ldi	r20, 0xFA	; 250
    1e24:	54 e4       	ldi	r21, 0x44	; 68
    1e26:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	8d 8b       	std	Y+21, r24	; 0x15
    1e30:	9e 8b       	std	Y+22, r25	; 0x16
    1e32:	af 8b       	std	Y+23, r26	; 0x17
    1e34:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e36:	6d 89       	ldd	r22, Y+21	; 0x15
    1e38:	7e 89       	ldd	r23, Y+22	; 0x16
    1e3a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e3c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	40 e8       	ldi	r20, 0x80	; 128
    1e44:	5f e3       	ldi	r21, 0x3F	; 63
    1e46:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e4a:	88 23       	and	r24, r24
    1e4c:	2c f4       	brge	.+10     	; 0x1e58 <LCD_voidInit+0x28c>
		__ticks = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	9c 8b       	std	Y+20, r25	; 0x14
    1e54:	8b 8b       	std	Y+19, r24	; 0x13
    1e56:	3f c0       	rjmp	.+126    	; 0x1ed6 <LCD_voidInit+0x30a>
	else if (__tmp > 65535)
    1e58:	6d 89       	ldd	r22, Y+21	; 0x15
    1e5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e60:	20 e0       	ldi	r18, 0x00	; 0
    1e62:	3f ef       	ldi	r19, 0xFF	; 255
    1e64:	4f e7       	ldi	r20, 0x7F	; 127
    1e66:	57 e4       	ldi	r21, 0x47	; 71
    1e68:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e6c:	18 16       	cp	r1, r24
    1e6e:	4c f5       	brge	.+82     	; 0x1ec2 <LCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e70:	69 8d       	ldd	r22, Y+25	; 0x19
    1e72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	30 e0       	ldi	r19, 0x00	; 0
    1e7c:	40 e2       	ldi	r20, 0x20	; 32
    1e7e:	51 e4       	ldi	r21, 0x41	; 65
    1e80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	bc 01       	movw	r22, r24
    1e8a:	cd 01       	movw	r24, r26
    1e8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e90:	dc 01       	movw	r26, r24
    1e92:	cb 01       	movw	r24, r22
    1e94:	9c 8b       	std	Y+20, r25	; 0x14
    1e96:	8b 8b       	std	Y+19, r24	; 0x13
    1e98:	0f c0       	rjmp	.+30     	; 0x1eb8 <LCD_voidInit+0x2ec>
    1e9a:	88 ec       	ldi	r24, 0xC8	; 200
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	9a 8b       	std	Y+18, r25	; 0x12
    1ea0:	89 8b       	std	Y+17, r24	; 0x11
    1ea2:	89 89       	ldd	r24, Y+17	; 0x11
    1ea4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea6:	01 97       	sbiw	r24, 0x01	; 1
    1ea8:	f1 f7       	brne	.-4      	; 0x1ea6 <LCD_voidInit+0x2da>
    1eaa:	9a 8b       	std	Y+18, r25	; 0x12
    1eac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1eae:	8b 89       	ldd	r24, Y+19	; 0x13
    1eb0:	9c 89       	ldd	r25, Y+20	; 0x14
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	9c 8b       	std	Y+20, r25	; 0x14
    1eb6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eba:	9c 89       	ldd	r25, Y+20	; 0x14
    1ebc:	00 97       	sbiw	r24, 0x00	; 0
    1ebe:	69 f7       	brne	.-38     	; 0x1e9a <LCD_voidInit+0x2ce>
    1ec0:	14 c0       	rjmp	.+40     	; 0x1eea <LCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ec2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ec4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ec6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ec8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	9c 8b       	std	Y+20, r25	; 0x14
    1ed4:	8b 8b       	std	Y+19, r24	; 0x13
    1ed6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eda:	98 8b       	std	Y+16, r25	; 0x10
    1edc:	8f 87       	std	Y+15, r24	; 0x0f
    1ede:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ee0:	98 89       	ldd	r25, Y+16	; 0x10
    1ee2:	01 97       	sbiw	r24, 0x01	; 1
    1ee4:	f1 f7       	brne	.-4      	; 0x1ee2 <LCD_voidInit+0x316>
    1ee6:	98 8b       	std	Y+16, r25	; 0x10
    1ee8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidWriteCmd(0x01);
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	a0 e0       	ldi	r26, 0x00	; 0
    1ef6:	b0 e4       	ldi	r27, 0x40	; 64
    1ef8:	8b 87       	std	Y+11, r24	; 0x0b
    1efa:	9c 87       	std	Y+12, r25	; 0x0c
    1efc:	ad 87       	std	Y+13, r26	; 0x0d
    1efe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	4a ef       	ldi	r20, 0xFA	; 250
    1f0e:	54 e4       	ldi	r21, 0x44	; 68
    1f10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f14:	dc 01       	movw	r26, r24
    1f16:	cb 01       	movw	r24, r22
    1f18:	8f 83       	std	Y+7, r24	; 0x07
    1f1a:	98 87       	std	Y+8, r25	; 0x08
    1f1c:	a9 87       	std	Y+9, r26	; 0x09
    1f1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	20 e0       	ldi	r18, 0x00	; 0
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	40 e8       	ldi	r20, 0x80	; 128
    1f2e:	5f e3       	ldi	r21, 0x3F	; 63
    1f30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f34:	88 23       	and	r24, r24
    1f36:	2c f4       	brge	.+10     	; 0x1f42 <LCD_voidInit+0x376>
		__ticks = 1;
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9e 83       	std	Y+6, r25	; 0x06
    1f3e:	8d 83       	std	Y+5, r24	; 0x05
    1f40:	3f c0       	rjmp	.+126    	; 0x1fc0 <LCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    1f42:	6f 81       	ldd	r22, Y+7	; 0x07
    1f44:	78 85       	ldd	r23, Y+8	; 0x08
    1f46:	89 85       	ldd	r24, Y+9	; 0x09
    1f48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	3f ef       	ldi	r19, 0xFF	; 255
    1f4e:	4f e7       	ldi	r20, 0x7F	; 127
    1f50:	57 e4       	ldi	r21, 0x47	; 71
    1f52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f56:	18 16       	cp	r1, r24
    1f58:	4c f5       	brge	.+82     	; 0x1fac <LCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f60:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	51 e4       	ldi	r21, 0x41	; 65
    1f6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	bc 01       	movw	r22, r24
    1f74:	cd 01       	movw	r24, r26
    1f76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	9e 83       	std	Y+6, r25	; 0x06
    1f80:	8d 83       	std	Y+5, r24	; 0x05
    1f82:	0f c0       	rjmp	.+30     	; 0x1fa2 <LCD_voidInit+0x3d6>
    1f84:	88 ec       	ldi	r24, 0xC8	; 200
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f90:	01 97       	sbiw	r24, 0x01	; 1
    1f92:	f1 f7       	brne	.-4      	; 0x1f90 <LCD_voidInit+0x3c4>
    1f94:	9c 83       	std	Y+4, r25	; 0x04
    1f96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9c:	01 97       	sbiw	r24, 0x01	; 1
    1f9e:	9e 83       	std	Y+6, r25	; 0x06
    1fa0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa6:	00 97       	sbiw	r24, 0x00	; 0
    1fa8:	69 f7       	brne	.-38     	; 0x1f84 <LCD_voidInit+0x3b8>
    1faa:	14 c0       	rjmp	.+40     	; 0x1fd4 <LCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	78 85       	ldd	r23, Y+8	; 0x08
    1fb0:	89 85       	ldd	r24, Y+9	; 0x09
    1fb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	f1 f7       	brne	.-4      	; 0x1fcc <LCD_voidInit+0x400>
    1fd0:	9a 83       	std	Y+2, r25	; 0x02
    1fd2:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidWriteCmd(0x06);/*Entry mode set*/
	_delay_us(40);

	#endif

}
    1fd4:	e8 96       	adiw	r28, 0x38	; 56
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <LCD_voidWriteCmd>:

void LCD_voidWriteCmd(u8 copy_u8Cmd)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	e9 97       	sbiw	r28, 0x39	; 57
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	89 af       	std	Y+57, r24	; 0x39
	DIO_voidSetPinValue(LCD_Ctrl_Port, LCD_RS_Pin, DIO_PIN_LOW); /*command*/
    1ffc:	82 e0       	ldi	r24, 0x02	; 2
    1ffe:	60 e0       	ldi	r22, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Ctrl_Port, LCD_RW_Pin, DIO_PIN_LOW); /*write*/
    2006:	82 e0       	ldi	r24, 0x02	; 2
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	40 e0       	ldi	r20, 0x00	; 0
    200c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	
#if LCD_MODE == LCD_4_BIT

	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin4, (GET_BIT(copy_u8Cmd,4)));
    2010:	89 ad       	ldd	r24, Y+57	; 0x39
    2012:	82 95       	swap	r24
    2014:	8f 70       	andi	r24, 0x0F	; 15
    2016:	98 2f       	mov	r25, r24
    2018:	91 70       	andi	r25, 0x01	; 1
    201a:	83 e0       	ldi	r24, 0x03	; 3
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	49 2f       	mov	r20, r25
    2020:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin5, (GET_BIT(copy_u8Cmd,5)));
    2024:	89 ad       	ldd	r24, Y+57	; 0x39
    2026:	82 95       	swap	r24
    2028:	86 95       	lsr	r24
    202a:	87 70       	andi	r24, 0x07	; 7
    202c:	98 2f       	mov	r25, r24
    202e:	91 70       	andi	r25, 0x01	; 1
    2030:	83 e0       	ldi	r24, 0x03	; 3
    2032:	61 e0       	ldi	r22, 0x01	; 1
    2034:	49 2f       	mov	r20, r25
    2036:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin6, (GET_BIT(copy_u8Cmd,6)));
    203a:	89 ad       	ldd	r24, Y+57	; 0x39
    203c:	82 95       	swap	r24
    203e:	86 95       	lsr	r24
    2040:	86 95       	lsr	r24
    2042:	83 70       	andi	r24, 0x03	; 3
    2044:	98 2f       	mov	r25, r24
    2046:	91 70       	andi	r25, 0x01	; 1
    2048:	83 e0       	ldi	r24, 0x03	; 3
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	49 2f       	mov	r20, r25
    204e:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port, LCD_4Bit_Pin7, (GET_BIT(copy_u8Cmd,7)));
    2052:	89 ad       	ldd	r24, Y+57	; 0x39
    2054:	98 2f       	mov	r25, r24
    2056:	99 1f       	adc	r25, r25
    2058:	99 27       	eor	r25, r25
    205a:	99 1f       	adc	r25, r25
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	63 e0       	ldi	r22, 0x03	; 3
    2060:	49 2f       	mov	r20, r25
    2062:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>


	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_HIGH);
    2066:	82 e0       	ldi	r24, 0x02	; 2
    2068:	62 e0       	ldi	r22, 0x02	; 2
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
    2070:	80 e0       	ldi	r24, 0x00	; 0
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	a0 e8       	ldi	r26, 0x80	; 128
    2076:	bf e3       	ldi	r27, 0x3F	; 63
    2078:	8d ab       	std	Y+53, r24	; 0x35
    207a:	9e ab       	std	Y+54, r25	; 0x36
    207c:	af ab       	std	Y+55, r26	; 0x37
    207e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2080:	6d a9       	ldd	r22, Y+53	; 0x35
    2082:	7e a9       	ldd	r23, Y+54	; 0x36
    2084:	8f a9       	ldd	r24, Y+55	; 0x37
    2086:	98 ad       	ldd	r25, Y+56	; 0x38
    2088:	20 e0       	ldi	r18, 0x00	; 0
    208a:	30 e0       	ldi	r19, 0x00	; 0
    208c:	4a ef       	ldi	r20, 0xFA	; 250
    208e:	54 e4       	ldi	r21, 0x44	; 68
    2090:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	89 ab       	std	Y+49, r24	; 0x31
    209a:	9a ab       	std	Y+50, r25	; 0x32
    209c:	ab ab       	std	Y+51, r26	; 0x33
    209e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20a0:	69 a9       	ldd	r22, Y+49	; 0x31
    20a2:	7a a9       	ldd	r23, Y+50	; 0x32
    20a4:	8b a9       	ldd	r24, Y+51	; 0x33
    20a6:	9c a9       	ldd	r25, Y+52	; 0x34
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e8       	ldi	r20, 0x80	; 128
    20ae:	5f e3       	ldi	r21, 0x3F	; 63
    20b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	2c f4       	brge	.+10     	; 0x20c2 <LCD_voidWriteCmd+0xdc>
		__ticks = 1;
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	98 ab       	std	Y+48, r25	; 0x30
    20be:	8f a7       	std	Y+47, r24	; 0x2f
    20c0:	3f c0       	rjmp	.+126    	; 0x2140 <LCD_voidWriteCmd+0x15a>
	else if (__tmp > 65535)
    20c2:	69 a9       	ldd	r22, Y+49	; 0x31
    20c4:	7a a9       	ldd	r23, Y+50	; 0x32
    20c6:	8b a9       	ldd	r24, Y+51	; 0x33
    20c8:	9c a9       	ldd	r25, Y+52	; 0x34
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	3f ef       	ldi	r19, 0xFF	; 255
    20ce:	4f e7       	ldi	r20, 0x7F	; 127
    20d0:	57 e4       	ldi	r21, 0x47	; 71
    20d2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20d6:	18 16       	cp	r1, r24
    20d8:	4c f5       	brge	.+82     	; 0x212c <LCD_voidWriteCmd+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	6d a9       	ldd	r22, Y+53	; 0x35
    20dc:	7e a9       	ldd	r23, Y+54	; 0x36
    20de:	8f a9       	ldd	r24, Y+55	; 0x37
    20e0:	98 ad       	ldd	r25, Y+56	; 0x38
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e2       	ldi	r20, 0x20	; 32
    20e8:	51 e4       	ldi	r21, 0x41	; 65
    20ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	bc 01       	movw	r22, r24
    20f4:	cd 01       	movw	r24, r26
    20f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	98 ab       	std	Y+48, r25	; 0x30
    2100:	8f a7       	std	Y+47, r24	; 0x2f
    2102:	0f c0       	rjmp	.+30     	; 0x2122 <LCD_voidWriteCmd+0x13c>
    2104:	88 ec       	ldi	r24, 0xC8	; 200
    2106:	90 e0       	ldi	r25, 0x00	; 0
    2108:	9e a7       	std	Y+46, r25	; 0x2e
    210a:	8d a7       	std	Y+45, r24	; 0x2d
    210c:	8d a5       	ldd	r24, Y+45	; 0x2d
    210e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2110:	01 97       	sbiw	r24, 0x01	; 1
    2112:	f1 f7       	brne	.-4      	; 0x2110 <LCD_voidWriteCmd+0x12a>
    2114:	9e a7       	std	Y+46, r25	; 0x2e
    2116:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2118:	8f a5       	ldd	r24, Y+47	; 0x2f
    211a:	98 a9       	ldd	r25, Y+48	; 0x30
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	98 ab       	std	Y+48, r25	; 0x30
    2120:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2122:	8f a5       	ldd	r24, Y+47	; 0x2f
    2124:	98 a9       	ldd	r25, Y+48	; 0x30
    2126:	00 97       	sbiw	r24, 0x00	; 0
    2128:	69 f7       	brne	.-38     	; 0x2104 <LCD_voidWriteCmd+0x11e>
    212a:	14 c0       	rjmp	.+40     	; 0x2154 <LCD_voidWriteCmd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    212c:	69 a9       	ldd	r22, Y+49	; 0x31
    212e:	7a a9       	ldd	r23, Y+50	; 0x32
    2130:	8b a9       	ldd	r24, Y+51	; 0x33
    2132:	9c a9       	ldd	r25, Y+52	; 0x34
    2134:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	98 ab       	std	Y+48, r25	; 0x30
    213e:	8f a7       	std	Y+47, r24	; 0x2f
    2140:	8f a5       	ldd	r24, Y+47	; 0x2f
    2142:	98 a9       	ldd	r25, Y+48	; 0x30
    2144:	9c a7       	std	Y+44, r25	; 0x2c
    2146:	8b a7       	std	Y+43, r24	; 0x2b
    2148:	8b a5       	ldd	r24, Y+43	; 0x2b
    214a:	9c a5       	ldd	r25, Y+44	; 0x2c
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	f1 f7       	brne	.-4      	; 0x214c <LCD_voidWriteCmd+0x166>
    2150:	9c a7       	std	Y+44, r25	; 0x2c
    2152:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_LOW);
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	62 e0       	ldi	r22, 0x02	; 2
    2158:	40 e0       	ldi	r20, 0x00	; 0
    215a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
    215e:	80 e0       	ldi	r24, 0x00	; 0
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	a0 ea       	ldi	r26, 0xA0	; 160
    2164:	b0 e4       	ldi	r27, 0x40	; 64
    2166:	8f a3       	std	Y+39, r24	; 0x27
    2168:	98 a7       	std	Y+40, r25	; 0x28
    216a:	a9 a7       	std	Y+41, r26	; 0x29
    216c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216e:	6f a1       	ldd	r22, Y+39	; 0x27
    2170:	78 a5       	ldd	r23, Y+40	; 0x28
    2172:	89 a5       	ldd	r24, Y+41	; 0x29
    2174:	9a a5       	ldd	r25, Y+42	; 0x2a
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	4a ef       	ldi	r20, 0xFA	; 250
    217c:	54 e4       	ldi	r21, 0x44	; 68
    217e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2182:	dc 01       	movw	r26, r24
    2184:	cb 01       	movw	r24, r22
    2186:	8b a3       	std	Y+35, r24	; 0x23
    2188:	9c a3       	std	Y+36, r25	; 0x24
    218a:	ad a3       	std	Y+37, r26	; 0x25
    218c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    218e:	6b a1       	ldd	r22, Y+35	; 0x23
    2190:	7c a1       	ldd	r23, Y+36	; 0x24
    2192:	8d a1       	ldd	r24, Y+37	; 0x25
    2194:	9e a1       	ldd	r25, Y+38	; 0x26
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e8       	ldi	r20, 0x80	; 128
    219c:	5f e3       	ldi	r21, 0x3F	; 63
    219e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    21a2:	88 23       	and	r24, r24
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <LCD_voidWriteCmd+0x1ca>
		__ticks = 1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	9a a3       	std	Y+34, r25	; 0x22
    21ac:	89 a3       	std	Y+33, r24	; 0x21
    21ae:	3f c0       	rjmp	.+126    	; 0x222e <LCD_voidWriteCmd+0x248>
	else if (__tmp > 65535)
    21b0:	6b a1       	ldd	r22, Y+35	; 0x23
    21b2:	7c a1       	ldd	r23, Y+36	; 0x24
    21b4:	8d a1       	ldd	r24, Y+37	; 0x25
    21b6:	9e a1       	ldd	r25, Y+38	; 0x26
    21b8:	20 e0       	ldi	r18, 0x00	; 0
    21ba:	3f ef       	ldi	r19, 0xFF	; 255
    21bc:	4f e7       	ldi	r20, 0x7F	; 127
    21be:	57 e4       	ldi	r21, 0x47	; 71
    21c0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    21c4:	18 16       	cp	r1, r24
    21c6:	4c f5       	brge	.+82     	; 0x221a <LCD_voidWriteCmd+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c8:	6f a1       	ldd	r22, Y+39	; 0x27
    21ca:	78 a5       	ldd	r23, Y+40	; 0x28
    21cc:	89 a5       	ldd	r24, Y+41	; 0x29
    21ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	40 e2       	ldi	r20, 0x20	; 32
    21d6:	51 e4       	ldi	r21, 0x41	; 65
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	bc 01       	movw	r22, r24
    21e2:	cd 01       	movw	r24, r26
    21e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9a a3       	std	Y+34, r25	; 0x22
    21ee:	89 a3       	std	Y+33, r24	; 0x21
    21f0:	0f c0       	rjmp	.+30     	; 0x2210 <LCD_voidWriteCmd+0x22a>
    21f2:	88 ec       	ldi	r24, 0xC8	; 200
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	98 a3       	std	Y+32, r25	; 0x20
    21f8:	8f 8f       	std	Y+31, r24	; 0x1f
    21fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21fc:	98 a1       	ldd	r25, Y+32	; 0x20
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_voidWriteCmd+0x218>
    2202:	98 a3       	std	Y+32, r25	; 0x20
    2204:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2206:	89 a1       	ldd	r24, Y+33	; 0x21
    2208:	9a a1       	ldd	r25, Y+34	; 0x22
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	9a a3       	std	Y+34, r25	; 0x22
    220e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2210:	89 a1       	ldd	r24, Y+33	; 0x21
    2212:	9a a1       	ldd	r25, Y+34	; 0x22
    2214:	00 97       	sbiw	r24, 0x00	; 0
    2216:	69 f7       	brne	.-38     	; 0x21f2 <LCD_voidWriteCmd+0x20c>
    2218:	14 c0       	rjmp	.+40     	; 0x2242 <LCD_voidWriteCmd+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221a:	6b a1       	ldd	r22, Y+35	; 0x23
    221c:	7c a1       	ldd	r23, Y+36	; 0x24
    221e:	8d a1       	ldd	r24, Y+37	; 0x25
    2220:	9e a1       	ldd	r25, Y+38	; 0x26
    2222:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9a a3       	std	Y+34, r25	; 0x22
    222c:	89 a3       	std	Y+33, r24	; 0x21
    222e:	89 a1       	ldd	r24, Y+33	; 0x21
    2230:	9a a1       	ldd	r25, Y+34	; 0x22
    2232:	9e 8f       	std	Y+30, r25	; 0x1e
    2234:	8d 8f       	std	Y+29, r24	; 0x1d
    2236:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2238:	9e 8d       	ldd	r25, Y+30	; 0x1e
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_voidWriteCmd+0x254>
    223e:	9e 8f       	std	Y+30, r25	; 0x1e
    2240:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);


	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin4, (GET_BIT(copy_u8Cmd,0)));
    2242:	89 ad       	ldd	r24, Y+57	; 0x39
    2244:	98 2f       	mov	r25, r24
    2246:	91 70       	andi	r25, 0x01	; 1
    2248:	83 e0       	ldi	r24, 0x03	; 3
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	49 2f       	mov	r20, r25
    224e:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin5, (GET_BIT(copy_u8Cmd,1)));
    2252:	89 ad       	ldd	r24, Y+57	; 0x39
    2254:	86 95       	lsr	r24
    2256:	98 2f       	mov	r25, r24
    2258:	91 70       	andi	r25, 0x01	; 1
    225a:	83 e0       	ldi	r24, 0x03	; 3
    225c:	61 e0       	ldi	r22, 0x01	; 1
    225e:	49 2f       	mov	r20, r25
    2260:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin6, (GET_BIT(copy_u8Cmd,2)));
    2264:	89 ad       	ldd	r24, Y+57	; 0x39
    2266:	86 95       	lsr	r24
    2268:	86 95       	lsr	r24
    226a:	98 2f       	mov	r25, r24
    226c:	91 70       	andi	r25, 0x01	; 1
    226e:	83 e0       	ldi	r24, 0x03	; 3
    2270:	62 e0       	ldi	r22, 0x02	; 2
    2272:	49 2f       	mov	r20, r25
    2274:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin7, (GET_BIT(copy_u8Cmd,3)));
    2278:	89 ad       	ldd	r24, Y+57	; 0x39
    227a:	86 95       	lsr	r24
    227c:	86 95       	lsr	r24
    227e:	86 95       	lsr	r24
    2280:	98 2f       	mov	r25, r24
    2282:	91 70       	andi	r25, 0x01	; 1
    2284:	83 e0       	ldi	r24, 0x03	; 3
    2286:	63 e0       	ldi	r22, 0x03	; 3
    2288:	49 2f       	mov	r20, r25
    228a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>


    DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_HIGH);
    228e:	82 e0       	ldi	r24, 0x02	; 2
    2290:	62 e0       	ldi	r22, 0x02	; 2
    2292:	41 e0       	ldi	r20, 0x01	; 1
    2294:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	a0 e8       	ldi	r26, 0x80	; 128
    229e:	bf e3       	ldi	r27, 0x3F	; 63
    22a0:	89 8f       	std	Y+25, r24	; 0x19
    22a2:	9a 8f       	std	Y+26, r25	; 0x1a
    22a4:	ab 8f       	std	Y+27, r26	; 0x1b
    22a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a8:	69 8d       	ldd	r22, Y+25	; 0x19
    22aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	4a ef       	ldi	r20, 0xFA	; 250
    22b6:	54 e4       	ldi	r21, 0x44	; 68
    22b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	8d 8b       	std	Y+21, r24	; 0x15
    22c2:	9e 8b       	std	Y+22, r25	; 0x16
    22c4:	af 8b       	std	Y+23, r26	; 0x17
    22c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22c8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ca:	7e 89       	ldd	r23, Y+22	; 0x16
    22cc:	8f 89       	ldd	r24, Y+23	; 0x17
    22ce:	98 8d       	ldd	r25, Y+24	; 0x18
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e8       	ldi	r20, 0x80	; 128
    22d6:	5f e3       	ldi	r21, 0x3F	; 63
    22d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    22dc:	88 23       	and	r24, r24
    22de:	2c f4       	brge	.+10     	; 0x22ea <LCD_voidWriteCmd+0x304>
		__ticks = 1;
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	9c 8b       	std	Y+20, r25	; 0x14
    22e6:	8b 8b       	std	Y+19, r24	; 0x13
    22e8:	3f c0       	rjmp	.+126    	; 0x2368 <LCD_voidWriteCmd+0x382>
	else if (__tmp > 65535)
    22ea:	6d 89       	ldd	r22, Y+21	; 0x15
    22ec:	7e 89       	ldd	r23, Y+22	; 0x16
    22ee:	8f 89       	ldd	r24, Y+23	; 0x17
    22f0:	98 8d       	ldd	r25, Y+24	; 0x18
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	3f ef       	ldi	r19, 0xFF	; 255
    22f6:	4f e7       	ldi	r20, 0x7F	; 127
    22f8:	57 e4       	ldi	r21, 0x47	; 71
    22fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    22fe:	18 16       	cp	r1, r24
    2300:	4c f5       	brge	.+82     	; 0x2354 <LCD_voidWriteCmd+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2302:	69 8d       	ldd	r22, Y+25	; 0x19
    2304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e2       	ldi	r20, 0x20	; 32
    2310:	51 e4       	ldi	r21, 0x41	; 65
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	bc 01       	movw	r22, r24
    231c:	cd 01       	movw	r24, r26
    231e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	9c 8b       	std	Y+20, r25	; 0x14
    2328:	8b 8b       	std	Y+19, r24	; 0x13
    232a:	0f c0       	rjmp	.+30     	; 0x234a <LCD_voidWriteCmd+0x364>
    232c:	88 ec       	ldi	r24, 0xC8	; 200
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	9a 8b       	std	Y+18, r25	; 0x12
    2332:	89 8b       	std	Y+17, r24	; 0x11
    2334:	89 89       	ldd	r24, Y+17	; 0x11
    2336:	9a 89       	ldd	r25, Y+18	; 0x12
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	f1 f7       	brne	.-4      	; 0x2338 <LCD_voidWriteCmd+0x352>
    233c:	9a 8b       	std	Y+18, r25	; 0x12
    233e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2340:	8b 89       	ldd	r24, Y+19	; 0x13
    2342:	9c 89       	ldd	r25, Y+20	; 0x14
    2344:	01 97       	sbiw	r24, 0x01	; 1
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    234a:	8b 89       	ldd	r24, Y+19	; 0x13
    234c:	9c 89       	ldd	r25, Y+20	; 0x14
    234e:	00 97       	sbiw	r24, 0x00	; 0
    2350:	69 f7       	brne	.-38     	; 0x232c <LCD_voidWriteCmd+0x346>
    2352:	14 c0       	rjmp	.+40     	; 0x237c <LCD_voidWriteCmd+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2354:	6d 89       	ldd	r22, Y+21	; 0x15
    2356:	7e 89       	ldd	r23, Y+22	; 0x16
    2358:	8f 89       	ldd	r24, Y+23	; 0x17
    235a:	98 8d       	ldd	r25, Y+24	; 0x18
    235c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2360:	dc 01       	movw	r26, r24
    2362:	cb 01       	movw	r24, r22
    2364:	9c 8b       	std	Y+20, r25	; 0x14
    2366:	8b 8b       	std	Y+19, r24	; 0x13
    2368:	8b 89       	ldd	r24, Y+19	; 0x13
    236a:	9c 89       	ldd	r25, Y+20	; 0x14
    236c:	98 8b       	std	Y+16, r25	; 0x10
    236e:	8f 87       	std	Y+15, r24	; 0x0f
    2370:	8f 85       	ldd	r24, Y+15	; 0x0f
    2372:	98 89       	ldd	r25, Y+16	; 0x10
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	f1 f7       	brne	.-4      	; 0x2374 <LCD_voidWriteCmd+0x38e>
    2378:	98 8b       	std	Y+16, r25	; 0x10
    237a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_LOW);
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	62 e0       	ldi	r22, 0x02	; 2
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
    2386:	80 e0       	ldi	r24, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	a0 ea       	ldi	r26, 0xA0	; 160
    238c:	b0 e4       	ldi	r27, 0x40	; 64
    238e:	8b 87       	std	Y+11, r24	; 0x0b
    2390:	9c 87       	std	Y+12, r25	; 0x0c
    2392:	ad 87       	std	Y+13, r26	; 0x0d
    2394:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2396:	6b 85       	ldd	r22, Y+11	; 0x0b
    2398:	7c 85       	ldd	r23, Y+12	; 0x0c
    239a:	8d 85       	ldd	r24, Y+13	; 0x0d
    239c:	9e 85       	ldd	r25, Y+14	; 0x0e
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	4a ef       	ldi	r20, 0xFA	; 250
    23a4:	54 e4       	ldi	r21, 0x44	; 68
    23a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	8f 83       	std	Y+7, r24	; 0x07
    23b0:	98 87       	std	Y+8, r25	; 0x08
    23b2:	a9 87       	std	Y+9, r26	; 0x09
    23b4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23b6:	6f 81       	ldd	r22, Y+7	; 0x07
    23b8:	78 85       	ldd	r23, Y+8	; 0x08
    23ba:	89 85       	ldd	r24, Y+9	; 0x09
    23bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	40 e8       	ldi	r20, 0x80	; 128
    23c4:	5f e3       	ldi	r21, 0x3F	; 63
    23c6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    23ca:	88 23       	and	r24, r24
    23cc:	2c f4       	brge	.+10     	; 0x23d8 <LCD_voidWriteCmd+0x3f2>
		__ticks = 1;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	9e 83       	std	Y+6, r25	; 0x06
    23d4:	8d 83       	std	Y+5, r24	; 0x05
    23d6:	3f c0       	rjmp	.+126    	; 0x2456 <LCD_voidWriteCmd+0x470>
	else if (__tmp > 65535)
    23d8:	6f 81       	ldd	r22, Y+7	; 0x07
    23da:	78 85       	ldd	r23, Y+8	; 0x08
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	3f ef       	ldi	r19, 0xFF	; 255
    23e4:	4f e7       	ldi	r20, 0x7F	; 127
    23e6:	57 e4       	ldi	r21, 0x47	; 71
    23e8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    23ec:	18 16       	cp	r1, r24
    23ee:	4c f5       	brge	.+82     	; 0x2442 <LCD_voidWriteCmd+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e2       	ldi	r20, 0x20	; 32
    23fe:	51 e4       	ldi	r21, 0x41	; 65
    2400:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	bc 01       	movw	r22, r24
    240a:	cd 01       	movw	r24, r26
    240c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2410:	dc 01       	movw	r26, r24
    2412:	cb 01       	movw	r24, r22
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	0f c0       	rjmp	.+30     	; 0x2438 <LCD_voidWriteCmd+0x452>
    241a:	88 ec       	ldi	r24, 0xC8	; 200
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	9c 83       	std	Y+4, r25	; 0x04
    2420:	8b 83       	std	Y+3, r24	; 0x03
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	9c 81       	ldd	r25, Y+4	; 0x04
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_voidWriteCmd+0x440>
    242a:	9c 83       	std	Y+4, r25	; 0x04
    242c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242e:	8d 81       	ldd	r24, Y+5	; 0x05
    2430:	9e 81       	ldd	r25, Y+6	; 0x06
    2432:	01 97       	sbiw	r24, 0x01	; 1
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	00 97       	sbiw	r24, 0x00	; 0
    243e:	69 f7       	brne	.-38     	; 0x241a <LCD_voidWriteCmd+0x434>
    2440:	14 c0       	rjmp	.+40     	; 0x246a <LCD_voidWriteCmd+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2442:	6f 81       	ldd	r22, Y+7	; 0x07
    2444:	78 85       	ldd	r23, Y+8	; 0x08
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	9a 85       	ldd	r25, Y+10	; 0x0a
    244a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    244e:	dc 01       	movw	r26, r24
    2450:	cb 01       	movw	r24, r22
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	9a 81       	ldd	r25, Y+2	; 0x02
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	f1 f7       	brne	.-4      	; 0x2462 <LCD_voidWriteCmd+0x47c>
    2466:	9a 83       	std	Y+2, r25	; 0x02
    2468:	89 83       	std	Y+1, r24	; 0x01

#endif



}
    246a:	e9 96       	adiw	r28, 0x39	; 57
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	08 95       	ret

0000247c <LCD_voidWriteChar>:
void LCD_voidWriteChar(char copy_charChar)
{
    247c:	df 93       	push	r29
    247e:	cf 93       	push	r28
    2480:	cd b7       	in	r28, 0x3d	; 61
    2482:	de b7       	in	r29, 0x3e	; 62
    2484:	6d 97       	sbiw	r28, 0x1d	; 29
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	8d 8f       	std	Y+29, r24	; 0x1d

DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_RS_Pin,DIO_PIN_HIGH);  /*data*/
    2492:	82 e0       	ldi	r24, 0x02	; 2
    2494:	60 e0       	ldi	r22, 0x00	; 0
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_RW_Pin,DIO_PIN_LOW);  /*data*/
    249c:	82 e0       	ldi	r24, 0x02	; 2
    249e:	61 e0       	ldi	r22, 0x01	; 1
    24a0:	40 e0       	ldi	r20, 0x00	; 0
    24a2:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>

#if LCD_MODE== LCD_4_BIT


DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin7, (GET_BIT(copy_charChar,7)));
    24a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a8:	98 2f       	mov	r25, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	99 27       	eor	r25, r25
    24ae:	99 1f       	adc	r25, r25
    24b0:	83 e0       	ldi	r24, 0x03	; 3
    24b2:	63 e0       	ldi	r22, 0x03	; 3
    24b4:	49 2f       	mov	r20, r25
    24b6:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin6, (GET_BIT(copy_charChar,6)));
    24ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24bc:	82 95       	swap	r24
    24be:	86 95       	lsr	r24
    24c0:	86 95       	lsr	r24
    24c2:	83 70       	andi	r24, 0x03	; 3
    24c4:	98 2f       	mov	r25, r24
    24c6:	91 70       	andi	r25, 0x01	; 1
    24c8:	83 e0       	ldi	r24, 0x03	; 3
    24ca:	62 e0       	ldi	r22, 0x02	; 2
    24cc:	49 2f       	mov	r20, r25
    24ce:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin5, (GET_BIT(copy_charChar,5)));
    24d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d4:	82 95       	swap	r24
    24d6:	86 95       	lsr	r24
    24d8:	87 70       	andi	r24, 0x07	; 7
    24da:	98 2f       	mov	r25, r24
    24dc:	91 70       	andi	r25, 0x01	; 1
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	49 2f       	mov	r20, r25
    24e4:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin4, (GET_BIT(copy_charChar,4)));
    24e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24ea:	82 95       	swap	r24
    24ec:	8f 70       	andi	r24, 0x0F	; 15
    24ee:	98 2f       	mov	r25, r24
    24f0:	91 70       	andi	r25, 0x01	; 1
    24f2:	83 e0       	ldi	r24, 0x03	; 3
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	49 2f       	mov	r20, r25
    24f8:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>

//DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_pin,DIO_PIN_LOW);
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_HIGH);
    24fc:	82 e0       	ldi	r24, 0x02	; 2
    24fe:	62 e0       	ldi	r22, 0x02	; 2
    2500:	41 e0       	ldi	r20, 0x01	; 1
    2502:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e8       	ldi	r26, 0x80	; 128
    250c:	bf e3       	ldi	r27, 0x3F	; 63
    250e:	89 8f       	std	Y+25, r24	; 0x19
    2510:	9a 8f       	std	Y+26, r25	; 0x1a
    2512:	ab 8f       	std	Y+27, r26	; 0x1b
    2514:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2516:	69 8d       	ldd	r22, Y+25	; 0x19
    2518:	7a 8d       	ldd	r23, Y+26	; 0x1a
    251a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    251c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	4a ef       	ldi	r20, 0xFA	; 250
    2524:	54 e4       	ldi	r21, 0x44	; 68
    2526:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	8d 8b       	std	Y+21, r24	; 0x15
    2530:	9e 8b       	std	Y+22, r25	; 0x16
    2532:	af 8b       	std	Y+23, r26	; 0x17
    2534:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2536:	6d 89       	ldd	r22, Y+21	; 0x15
    2538:	7e 89       	ldd	r23, Y+22	; 0x16
    253a:	8f 89       	ldd	r24, Y+23	; 0x17
    253c:	98 8d       	ldd	r25, Y+24	; 0x18
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e8       	ldi	r20, 0x80	; 128
    2544:	5f e3       	ldi	r21, 0x3F	; 63
    2546:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    254a:	88 23       	and	r24, r24
    254c:	2c f4       	brge	.+10     	; 0x2558 <LCD_voidWriteChar+0xdc>
		__ticks = 1;
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	9c 8b       	std	Y+20, r25	; 0x14
    2554:	8b 8b       	std	Y+19, r24	; 0x13
    2556:	3f c0       	rjmp	.+126    	; 0x25d6 <LCD_voidWriteChar+0x15a>
	else if (__tmp > 65535)
    2558:	6d 89       	ldd	r22, Y+21	; 0x15
    255a:	7e 89       	ldd	r23, Y+22	; 0x16
    255c:	8f 89       	ldd	r24, Y+23	; 0x17
    255e:	98 8d       	ldd	r25, Y+24	; 0x18
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	4c f5       	brge	.+82     	; 0x25c2 <LCD_voidWriteChar+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2570:	69 8d       	ldd	r22, Y+25	; 0x19
    2572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2578:	20 e0       	ldi	r18, 0x00	; 0
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e2       	ldi	r20, 0x20	; 32
    257e:	51 e4       	ldi	r21, 0x41	; 65
    2580:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2584:	dc 01       	movw	r26, r24
    2586:	cb 01       	movw	r24, r22
    2588:	bc 01       	movw	r22, r24
    258a:	cd 01       	movw	r24, r26
    258c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	9c 8b       	std	Y+20, r25	; 0x14
    2596:	8b 8b       	std	Y+19, r24	; 0x13
    2598:	0f c0       	rjmp	.+30     	; 0x25b8 <LCD_voidWriteChar+0x13c>
    259a:	88 ec       	ldi	r24, 0xC8	; 200
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9a 8b       	std	Y+18, r25	; 0x12
    25a0:	89 8b       	std	Y+17, r24	; 0x11
    25a2:	89 89       	ldd	r24, Y+17	; 0x11
    25a4:	9a 89       	ldd	r25, Y+18	; 0x12
    25a6:	01 97       	sbiw	r24, 0x01	; 1
    25a8:	f1 f7       	brne	.-4      	; 0x25a6 <LCD_voidWriteChar+0x12a>
    25aa:	9a 8b       	std	Y+18, r25	; 0x12
    25ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ae:	8b 89       	ldd	r24, Y+19	; 0x13
    25b0:	9c 89       	ldd	r25, Y+20	; 0x14
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	9c 8b       	std	Y+20, r25	; 0x14
    25b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b8:	8b 89       	ldd	r24, Y+19	; 0x13
    25ba:	9c 89       	ldd	r25, Y+20	; 0x14
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	69 f7       	brne	.-38     	; 0x259a <LCD_voidWriteChar+0x11e>
    25c0:	14 c0       	rjmp	.+40     	; 0x25ea <LCD_voidWriteChar+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25c2:	6d 89       	ldd	r22, Y+21	; 0x15
    25c4:	7e 89       	ldd	r23, Y+22	; 0x16
    25c6:	8f 89       	ldd	r24, Y+23	; 0x17
    25c8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
    25d6:	8b 89       	ldd	r24, Y+19	; 0x13
    25d8:	9c 89       	ldd	r25, Y+20	; 0x14
    25da:	98 8b       	std	Y+16, r25	; 0x10
    25dc:	8f 87       	std	Y+15, r24	; 0x0f
    25de:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e0:	98 89       	ldd	r25, Y+16	; 0x10
    25e2:	01 97       	sbiw	r24, 0x01	; 1
    25e4:	f1 f7       	brne	.-4      	; 0x25e2 <LCD_voidWriteChar+0x166>
    25e6:	98 8b       	std	Y+16, r25	; 0x10
    25e8:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_LOW);
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	62 e0       	ldi	r22, 0x02	; 2
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>


DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin7, (GET_BIT(copy_charChar,3)));
    25f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f6:	86 95       	lsr	r24
    25f8:	86 95       	lsr	r24
    25fa:	86 95       	lsr	r24
    25fc:	98 2f       	mov	r25, r24
    25fe:	91 70       	andi	r25, 0x01	; 1
    2600:	83 e0       	ldi	r24, 0x03	; 3
    2602:	63 e0       	ldi	r22, 0x03	; 3
    2604:	49 2f       	mov	r20, r25
    2606:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin6, (GET_BIT(copy_charChar,2)));
    260a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    260c:	86 95       	lsr	r24
    260e:	86 95       	lsr	r24
    2610:	98 2f       	mov	r25, r24
    2612:	91 70       	andi	r25, 0x01	; 1
    2614:	83 e0       	ldi	r24, 0x03	; 3
    2616:	62 e0       	ldi	r22, 0x02	; 2
    2618:	49 2f       	mov	r20, r25
    261a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin5, (GET_BIT(copy_charChar,1)));
    261e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2620:	86 95       	lsr	r24
    2622:	98 2f       	mov	r25, r24
    2624:	91 70       	andi	r25, 0x01	; 1
    2626:	83 e0       	ldi	r24, 0x03	; 3
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	49 2f       	mov	r20, r25
    262c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
DIO_voidSetPinValue(LCD_Data_Port ,LCD_4Bit_Pin4, (GET_BIT(copy_charChar,0)));
    2630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2632:	98 2f       	mov	r25, r24
    2634:	91 70       	andi	r25, 0x01	; 1
    2636:	83 e0       	ldi	r24, 0x03	; 3
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	49 2f       	mov	r20, r25
    263c:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>


DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_HIGH);
    2640:	82 e0       	ldi	r24, 0x02	; 2
    2642:	62 e0       	ldi	r22, 0x02	; 2
    2644:	41 e0       	ldi	r20, 0x01	; 1
    2646:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	a0 e8       	ldi	r26, 0x80	; 128
    2650:	bf e3       	ldi	r27, 0x3F	; 63
    2652:	8b 87       	std	Y+11, r24	; 0x0b
    2654:	9c 87       	std	Y+12, r25	; 0x0c
    2656:	ad 87       	std	Y+13, r26	; 0x0d
    2658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    265a:	6b 85       	ldd	r22, Y+11	; 0x0b
    265c:	7c 85       	ldd	r23, Y+12	; 0x0c
    265e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2660:	9e 85       	ldd	r25, Y+14	; 0x0e
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a ef       	ldi	r20, 0xFA	; 250
    2668:	54 e4       	ldi	r21, 0x44	; 68
    266a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8f 83       	std	Y+7, r24	; 0x07
    2674:	98 87       	std	Y+8, r25	; 0x08
    2676:	a9 87       	std	Y+9, r26	; 0x09
    2678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    267a:	6f 81       	ldd	r22, Y+7	; 0x07
    267c:	78 85       	ldd	r23, Y+8	; 0x08
    267e:	89 85       	ldd	r24, Y+9	; 0x09
    2680:	9a 85       	ldd	r25, Y+10	; 0x0a
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e8       	ldi	r20, 0x80	; 128
    2688:	5f e3       	ldi	r21, 0x3F	; 63
    268a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    268e:	88 23       	and	r24, r24
    2690:	2c f4       	brge	.+10     	; 0x269c <LCD_voidWriteChar+0x220>
		__ticks = 1;
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	9e 83       	std	Y+6, r25	; 0x06
    2698:	8d 83       	std	Y+5, r24	; 0x05
    269a:	3f c0       	rjmp	.+126    	; 0x271a <LCD_voidWriteChar+0x29e>
	else if (__tmp > 65535)
    269c:	6f 81       	ldd	r22, Y+7	; 0x07
    269e:	78 85       	ldd	r23, Y+8	; 0x08
    26a0:	89 85       	ldd	r24, Y+9	; 0x09
    26a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	3f ef       	ldi	r19, 0xFF	; 255
    26a8:	4f e7       	ldi	r20, 0x7F	; 127
    26aa:	57 e4       	ldi	r21, 0x47	; 71
    26ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26b0:	18 16       	cp	r1, r24
    26b2:	4c f5       	brge	.+82     	; 0x2706 <LCD_voidWriteChar+0x28a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    26bc:	20 e0       	ldi	r18, 0x00	; 0
    26be:	30 e0       	ldi	r19, 0x00	; 0
    26c0:	40 e2       	ldi	r20, 0x20	; 32
    26c2:	51 e4       	ldi	r21, 0x41	; 65
    26c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	bc 01       	movw	r22, r24
    26ce:	cd 01       	movw	r24, r26
    26d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9e 83       	std	Y+6, r25	; 0x06
    26da:	8d 83       	std	Y+5, r24	; 0x05
    26dc:	0f c0       	rjmp	.+30     	; 0x26fc <LCD_voidWriteChar+0x280>
    26de:	88 ec       	ldi	r24, 0xC8	; 200
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	9c 83       	std	Y+4, r25	; 0x04
    26e4:	8b 83       	std	Y+3, r24	; 0x03
    26e6:	8b 81       	ldd	r24, Y+3	; 0x03
    26e8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ea:	01 97       	sbiw	r24, 0x01	; 1
    26ec:	f1 f7       	brne	.-4      	; 0x26ea <LCD_voidWriteChar+0x26e>
    26ee:	9c 83       	std	Y+4, r25	; 0x04
    26f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	9e 81       	ldd	r25, Y+6	; 0x06
    26f6:	01 97       	sbiw	r24, 0x01	; 1
    26f8:	9e 83       	std	Y+6, r25	; 0x06
    26fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2700:	00 97       	sbiw	r24, 0x00	; 0
    2702:	69 f7       	brne	.-38     	; 0x26de <LCD_voidWriteChar+0x262>
    2704:	14 c0       	rjmp	.+40     	; 0x272e <LCD_voidWriteChar+0x2b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2706:	6f 81       	ldd	r22, Y+7	; 0x07
    2708:	78 85       	ldd	r23, Y+8	; 0x08
    270a:	89 85       	ldd	r24, Y+9	; 0x09
    270c:	9a 85       	ldd	r25, Y+10	; 0x0a
    270e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	9e 83       	std	Y+6, r25	; 0x06
    2718:	8d 83       	std	Y+5, r24	; 0x05
    271a:	8d 81       	ldd	r24, Y+5	; 0x05
    271c:	9e 81       	ldd	r25, Y+6	; 0x06
    271e:	9a 83       	std	Y+2, r25	; 0x02
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	89 81       	ldd	r24, Y+1	; 0x01
    2724:	9a 81       	ldd	r25, Y+2	; 0x02
    2726:	01 97       	sbiw	r24, 0x01	; 1
    2728:	f1 f7       	brne	.-4      	; 0x2726 <LCD_voidWriteChar+0x2aa>
    272a:	9a 83       	std	Y+2, r25	; 0x02
    272c:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1);
DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin, DIO_PIN_LOW);
    272e:	82 e0       	ldi	r24, 0x02	; 2
    2730:	62 e0       	ldi	r22, 0x02	; 2
    2732:	40 e0       	ldi	r20, 0x00	; 0
    2734:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_Ctrl_Port,LCD_EN_Pin,DIO_PIN_LOW);

#endif


}
    2738:	6d 96       	adiw	r28, 0x1d	; 29
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	cf 91       	pop	r28
    2746:	df 91       	pop	r29
    2748:	08 95       	ret

0000274a <LCD_voidClearScreen>:
void LCD_voidClearScreen(void)
{
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	cd b7       	in	r28, 0x3d	; 61
    2750:	de b7       	in	r29, 0x3e	; 62
    2752:	2e 97       	sbiw	r28, 0x0e	; 14
    2754:	0f b6       	in	r0, 0x3f	; 63
    2756:	f8 94       	cli
    2758:	de bf       	out	0x3e, r29	; 62
    275a:	0f be       	out	0x3f, r0	; 63
    275c:	cd bf       	out	0x3d, r28	; 61
	LCD_voidWriteCmd(0x01);
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e0       	ldi	r26, 0x00	; 0
    276a:	b0 e4       	ldi	r27, 0x40	; 64
    276c:	8b 87       	std	Y+11, r24	; 0x0b
    276e:	9c 87       	std	Y+12, r25	; 0x0c
    2770:	ad 87       	std	Y+13, r26	; 0x0d
    2772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	6b 85       	ldd	r22, Y+11	; 0x0b
    2776:	7c 85       	ldd	r23, Y+12	; 0x0c
    2778:	8d 85       	ldd	r24, Y+13	; 0x0d
    277a:	9e 85       	ldd	r25, Y+14	; 0x0e
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a ef       	ldi	r20, 0xFA	; 250
    2782:	54 e4       	ldi	r21, 0x44	; 68
    2784:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8f 83       	std	Y+7, r24	; 0x07
    278e:	98 87       	std	Y+8, r25	; 0x08
    2790:	a9 87       	std	Y+9, r26	; 0x09
    2792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2794:	6f 81       	ldd	r22, Y+7	; 0x07
    2796:	78 85       	ldd	r23, Y+8	; 0x08
    2798:	89 85       	ldd	r24, Y+9	; 0x09
    279a:	9a 85       	ldd	r25, Y+10	; 0x0a
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <LCD_voidClearScreen+0x6c>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <LCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    27b6:	6f 81       	ldd	r22, Y+7	; 0x07
    27b8:	78 85       	ldd	r23, Y+8	; 0x08
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <LCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <LCD_voidClearScreen+0xcc>
    27f8:	88 ec       	ldi	r24, 0xC8	; 200
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	9c 81       	ldd	r25, Y+4	; 0x04
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <LCD_voidClearScreen+0xba>
    2808:	9c 83       	std	Y+4, r25	; 0x04
    280a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <LCD_voidClearScreen+0xae>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <LCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	6f 81       	ldd	r22, Y+7	; 0x07
    2822:	78 85       	ldd	r23, Y+8	; 0x08
    2824:	89 85       	ldd	r24, Y+9	; 0x09
    2826:	9a 85       	ldd	r25, Y+10	; 0x0a
    2828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9e 83       	std	Y+6, r25	; 0x06
    2832:	8d 83       	std	Y+5, r24	; 0x05
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	9e 81       	ldd	r25, Y+6	; 0x06
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_voidClearScreen+0xf6>
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2848:	2e 96       	adiw	r28, 0x0e	; 14
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	08 95       	ret

0000285a <LCD_voidSetCursor>:
void LCD_voidSetCursor(u8 copy_u8Row,u8 copy_u8Col)
{
    285a:	df 93       	push	r29
    285c:	cf 93       	push	r28
    285e:	00 d0       	rcall	.+0      	; 0x2860 <LCD_voidSetCursor+0x6>
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidWriteCmd((128+(copy_u8Row*64)+copy_u8Col));
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	88 2f       	mov	r24, r24
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	02 96       	adiw	r24, 0x02	; 2
    2870:	00 24       	eor	r0, r0
    2872:	96 95       	lsr	r25
    2874:	87 95       	ror	r24
    2876:	07 94       	ror	r0
    2878:	96 95       	lsr	r25
    287a:	87 95       	ror	r24
    287c:	07 94       	ror	r0
    287e:	98 2f       	mov	r25, r24
    2880:	80 2d       	mov	r24, r0
    2882:	98 2f       	mov	r25, r24
    2884:	8a 81       	ldd	r24, Y+2	; 0x02
    2886:	89 0f       	add	r24, r25
    2888:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
}
    288c:	0f 90       	pop	r0
    288e:	0f 90       	pop	r0
    2890:	cf 91       	pop	r28
    2892:	df 91       	pop	r29
    2894:	08 95       	ret

00002896 <LCD_voidWriteString>:
void LCD_voidWriteString(const char* copy_ccharpString)
{
    2896:	df 93       	push	r29
    2898:	cf 93       	push	r28
    289a:	00 d0       	rcall	.+0      	; 0x289c <LCD_voidWriteString+0x6>
    289c:	0f 92       	push	r0
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	9b 83       	std	Y+3, r25	; 0x03
    28a4:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8i;
	do{
		LCD_voidWriteChar(copy_ccharpString[local_u8i]);
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	28 2f       	mov	r18, r24
    28aa:	30 e0       	ldi	r19, 0x00	; 0
    28ac:	8a 81       	ldd	r24, Y+2	; 0x02
    28ae:	9b 81       	ldd	r25, Y+3	; 0x03
    28b0:	fc 01       	movw	r30, r24
    28b2:	e2 0f       	add	r30, r18
    28b4:	f3 1f       	adc	r31, r19
    28b6:	80 81       	ld	r24, Z
    28b8:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_voidWriteChar>
		local_u8i++;
    28bc:	89 81       	ldd	r24, Y+1	; 0x01
    28be:	8f 5f       	subi	r24, 0xFF	; 255
    28c0:	89 83       	std	Y+1, r24	; 0x01
	  }while(copy_ccharpString[local_u8i]!='\0');
    28c2:	89 81       	ldd	r24, Y+1	; 0x01
    28c4:	28 2f       	mov	r18, r24
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	9b 81       	ldd	r25, Y+3	; 0x03
    28cc:	fc 01       	movw	r30, r24
    28ce:	e2 0f       	add	r30, r18
    28d0:	f3 1f       	adc	r31, r19
    28d2:	80 81       	ld	r24, Z
    28d4:	88 23       	and	r24, r24
    28d6:	39 f7       	brne	.-50     	; 0x28a6 <LCD_voidWriteString+0x10>

}
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <LCD_voidWriteNum>:

void LCD_voidWriteNum(u32 copy_u32Num)
{
    28e4:	ef 92       	push	r14
    28e6:	ff 92       	push	r15
    28e8:	0f 93       	push	r16
    28ea:	1f 93       	push	r17
    28ec:	df 93       	push	r29
    28ee:	cf 93       	push	r28
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	28 97       	sbiw	r28, 0x08	; 8
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	6d 83       	std	Y+5, r22	; 0x05
    2902:	7e 83       	std	Y+6, r23	; 0x06
    2904:	8f 83       	std	Y+7, r24	; 0x07
    2906:	98 87       	std	Y+8, r25	; 0x08
	if(0==copy_u32Num)
    2908:	8d 81       	ldd	r24, Y+5	; 0x05
    290a:	9e 81       	ldd	r25, Y+6	; 0x06
    290c:	af 81       	ldd	r26, Y+7	; 0x07
    290e:	b8 85       	ldd	r27, Y+8	; 0x08
    2910:	00 97       	sbiw	r24, 0x00	; 0
    2912:	a1 05       	cpc	r26, r1
    2914:	b1 05       	cpc	r27, r1
    2916:	91 f4       	brne	.+36     	; 0x293c <LCD_voidWriteNum+0x58>
	{
		LCD_voidWriteChar((copy_u32Num%10)+48);
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	af 81       	ldd	r26, Y+7	; 0x07
    291e:	b8 85       	ldd	r27, Y+8	; 0x08
    2920:	2a e0       	ldi	r18, 0x0A	; 10
    2922:	30 e0       	ldi	r19, 0x00	; 0
    2924:	40 e0       	ldi	r20, 0x00	; 0
    2926:	50 e0       	ldi	r21, 0x00	; 0
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodsi4>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	80 5d       	subi	r24, 0xD0	; 208
    2936:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_voidWriteChar>
    293a:	74 c0       	rjmp	.+232    	; 0x2a24 <LCD_voidWriteNum+0x140>
	}
	else
	{
		u32 reverse=1;
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	a0 e0       	ldi	r26, 0x00	; 0
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	9a 83       	std	Y+2, r25	; 0x02
    2948:	ab 83       	std	Y+3, r26	; 0x03
    294a:	bc 83       	std	Y+4, r27	; 0x04
    294c:	36 c0       	rjmp	.+108    	; 0x29ba <LCD_voidWriteNum+0xd6>
		while(copy_u32Num!=0)
		{
			reverse=(reverse*10)+(copy_u32Num%10);
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	ab 81       	ldd	r26, Y+3	; 0x03
    2954:	bc 81       	ldd	r27, Y+4	; 0x04
    2956:	2a e0       	ldi	r18, 0x0A	; 10
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	40 e0       	ldi	r20, 0x00	; 0
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <__mulsi3>
    2966:	7b 01       	movw	r14, r22
    2968:	8c 01       	movw	r16, r24
    296a:	8d 81       	ldd	r24, Y+5	; 0x05
    296c:	9e 81       	ldd	r25, Y+6	; 0x06
    296e:	af 81       	ldd	r26, Y+7	; 0x07
    2970:	b8 85       	ldd	r27, Y+8	; 0x08
    2972:	2a e0       	ldi	r18, 0x0A	; 10
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	50 e0       	ldi	r21, 0x00	; 0
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodsi4>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	8e 0d       	add	r24, r14
    2988:	9f 1d       	adc	r25, r15
    298a:	a0 1f       	adc	r26, r16
    298c:	b1 1f       	adc	r27, r17
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	ab 83       	std	Y+3, r26	; 0x03
    2994:	bc 83       	std	Y+4, r27	; 0x04
			copy_u32Num/=10;
    2996:	8d 81       	ldd	r24, Y+5	; 0x05
    2998:	9e 81       	ldd	r25, Y+6	; 0x06
    299a:	af 81       	ldd	r26, Y+7	; 0x07
    299c:	b8 85       	ldd	r27, Y+8	; 0x08
    299e:	2a e0       	ldi	r18, 0x0A	; 10
    29a0:	30 e0       	ldi	r19, 0x00	; 0
    29a2:	40 e0       	ldi	r20, 0x00	; 0
    29a4:	50 e0       	ldi	r21, 0x00	; 0
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodsi4>
    29ae:	da 01       	movw	r26, r20
    29b0:	c9 01       	movw	r24, r18
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	9e 83       	std	Y+6, r25	; 0x06
    29b6:	af 83       	std	Y+7, r26	; 0x07
    29b8:	b8 87       	std	Y+8, r27	; 0x08
		LCD_voidWriteChar((copy_u32Num%10)+48);
	}
	else
	{
		u32 reverse=1;
		while(copy_u32Num!=0)
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	af 81       	ldd	r26, Y+7	; 0x07
    29c0:	b8 85       	ldd	r27, Y+8	; 0x08
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	a1 05       	cpc	r26, r1
    29c6:	b1 05       	cpc	r27, r1
    29c8:	11 f6       	brne	.-124    	; 0x294e <LCD_voidWriteNum+0x6a>
    29ca:	23 c0       	rjmp	.+70     	; 0x2a12 <LCD_voidWriteNum+0x12e>
			reverse=(reverse*10)+(copy_u32Num%10);
			copy_u32Num/=10;
		}
		while(reverse!=1)
		{
			LCD_voidWriteChar((reverse%10)+48);
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	9a 81       	ldd	r25, Y+2	; 0x02
    29d0:	ab 81       	ldd	r26, Y+3	; 0x03
    29d2:	bc 81       	ldd	r27, Y+4	; 0x04
    29d4:	2a e0       	ldi	r18, 0x0A	; 10
    29d6:	30 e0       	ldi	r19, 0x00	; 0
    29d8:	40 e0       	ldi	r20, 0x00	; 0
    29da:	50 e0       	ldi	r21, 0x00	; 0
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodsi4>
    29e4:	dc 01       	movw	r26, r24
    29e6:	cb 01       	movw	r24, r22
    29e8:	80 5d       	subi	r24, 0xD0	; 208
    29ea:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_voidWriteChar>
			reverse/=10;
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	ab 81       	ldd	r26, Y+3	; 0x03
    29f4:	bc 81       	ldd	r27, Y+4	; 0x04
    29f6:	2a e0       	ldi	r18, 0x0A	; 10
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e0       	ldi	r20, 0x00	; 0
    29fc:	50 e0       	ldi	r21, 0x00	; 0
    29fe:	bc 01       	movw	r22, r24
    2a00:	cd 01       	movw	r24, r26
    2a02:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <__udivmodsi4>
    2a06:	da 01       	movw	r26, r20
    2a08:	c9 01       	movw	r24, r18
    2a0a:	89 83       	std	Y+1, r24	; 0x01
    2a0c:	9a 83       	std	Y+2, r25	; 0x02
    2a0e:	ab 83       	std	Y+3, r26	; 0x03
    2a10:	bc 83       	std	Y+4, r27	; 0x04
		while(copy_u32Num!=0)
		{
			reverse=(reverse*10)+(copy_u32Num%10);
			copy_u32Num/=10;
		}
		while(reverse!=1)
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	9a 81       	ldd	r25, Y+2	; 0x02
    2a16:	ab 81       	ldd	r26, Y+3	; 0x03
    2a18:	bc 81       	ldd	r27, Y+4	; 0x04
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	91 05       	cpc	r25, r1
    2a1e:	a1 05       	cpc	r26, r1
    2a20:	b1 05       	cpc	r27, r1
    2a22:	a1 f6       	brne	.-88     	; 0x29cc <LCD_voidWriteNum+0xe8>
		{
			LCD_voidWriteChar((reverse%10)+48);
			reverse/=10;
		}
	}
}
    2a24:	28 96       	adiw	r28, 0x08	; 8
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	1f 91       	pop	r17
    2a36:	0f 91       	pop	r16
    2a38:	ff 90       	pop	r15
    2a3a:	ef 90       	pop	r14
    2a3c:	08 95       	ret

00002a3e <LCD_voidCreateChar>:

void LCD_voidCreateChar(u8 copy_u8AddressData, u8 * copy_u8charArr)
{
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	00 d0       	rcall	.+0      	; 0x2a44 <LCD_voidCreateChar+0x6>
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <LCD_voidCreateChar+0x8>
    2a46:	cd b7       	in	r28, 0x3d	; 61
    2a48:	de b7       	in	r29, 0x3e	; 62
    2a4a:	8a 83       	std	Y+2, r24	; 0x02
    2a4c:	7c 83       	std	Y+4, r23	; 0x04
    2a4e:	6b 83       	std	Y+3, r22	; 0x03
	LCD_voidWriteCmd(0x40|(copy_u8AddressData*8));  //cgram
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	88 0f       	add	r24, r24
    2a58:	99 1f       	adc	r25, r25
    2a5a:	88 0f       	add	r24, r24
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	80 64       	ori	r24, 0x40	; 64
    2a64:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
	for(u8 i=0;i<8;i++)
    2a68:	19 82       	std	Y+1, r1	; 0x01
    2a6a:	0e c0       	rjmp	.+28     	; 0x2a88 <LCD_voidCreateChar+0x4a>
	{
		LCD_voidWriteChar(copy_u8charArr[i]);
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	28 2f       	mov	r18, r24
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	8b 81       	ldd	r24, Y+3	; 0x03
    2a74:	9c 81       	ldd	r25, Y+4	; 0x04
    2a76:	fc 01       	movw	r30, r24
    2a78:	e2 0f       	add	r30, r18
    2a7a:	f3 1f       	adc	r31, r19
    2a7c:	80 81       	ld	r24, Z
    2a7e:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_voidWriteChar>
}

void LCD_voidCreateChar(u8 copy_u8AddressData, u8 * copy_u8charArr)
{
	LCD_voidWriteCmd(0x40|(copy_u8AddressData*8));  //cgram
	for(u8 i=0;i<8;i++)
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	8f 5f       	subi	r24, 0xFF	; 255
    2a86:	89 83       	std	Y+1, r24	; 0x01
    2a88:	89 81       	ldd	r24, Y+1	; 0x01
    2a8a:	88 30       	cpi	r24, 0x08	; 8
    2a8c:	78 f3       	brcs	.-34     	; 0x2a6c <LCD_voidCreateChar+0x2e>
	{
		LCD_voidWriteChar(copy_u8charArr[i]);
	}
	LCD_voidWriteCmd(0x80);//return to ddram
    2a8e:	80 e8       	ldi	r24, 0x80	; 128
    2a90:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_voidWriteCmd>
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <main>:

#include "DIO_interface.h"
#include "ADC_interface.h"

int main()
{
    2aa2:	0f 93       	push	r16
    2aa4:	1f 93       	push	r17
    2aa6:	df 93       	push	r29
    2aa8:	cf 93       	push	r28
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	e7 97       	sbiw	r28, 0x37	; 55
    2ab0:	0f b6       	in	r0, 0x3f	; 63
    2ab2:	f8 94       	cli
    2ab4:	de bf       	out	0x3e, r29	; 62
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	cd bf       	out	0x3d, r28	; 61
	u16 adc_value=0;
    2aba:	1b 8a       	std	Y+19, r1	; 0x13
    2abc:	1a 8a       	std	Y+18, r1	; 0x12
	u8 digital_value=0;
    2abe:	19 8a       	std	Y+17, r1	; 0x11
	u8 thershold_value=0;
    2ac0:	18 8a       	std	Y+16, r1	; 0x10
	u8 count=0;
    2ac2:	1f 86       	std	Y+15, r1	; 0x0f
	u8 arr[2]={0};
    2ac4:	1d 8a       	std	Y+21, r1	; 0x15
    2ac6:	1c 8a       	std	Y+20, r1	; 0x14
	const char ldr_text[]="ldr value: ";
    2ac8:	ce 01       	movw	r24, r28
    2aca:	46 96       	adiw	r24, 0x16	; 22
    2acc:	9f a7       	std	Y+47, r25	; 0x2f
    2ace:	8e a7       	std	Y+46, r24	; 0x2e
    2ad0:	e0 e6       	ldi	r30, 0x60	; 96
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	f9 ab       	std	Y+49, r31	; 0x31
    2ad6:	e8 ab       	std	Y+48, r30	; 0x30
    2ad8:	fc e0       	ldi	r31, 0x0C	; 12
    2ada:	fa ab       	std	Y+50, r31	; 0x32
    2adc:	e8 a9       	ldd	r30, Y+48	; 0x30
    2ade:	f9 a9       	ldd	r31, Y+49	; 0x31
    2ae0:	00 80       	ld	r0, Z
    2ae2:	88 a9       	ldd	r24, Y+48	; 0x30
    2ae4:	99 a9       	ldd	r25, Y+49	; 0x31
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	99 ab       	std	Y+49, r25	; 0x31
    2aea:	88 ab       	std	Y+48, r24	; 0x30
    2aec:	ee a5       	ldd	r30, Y+46	; 0x2e
    2aee:	ff a5       	ldd	r31, Y+47	; 0x2f
    2af0:	00 82       	st	Z, r0
    2af2:	8e a5       	ldd	r24, Y+46	; 0x2e
    2af4:	9f a5       	ldd	r25, Y+47	; 0x2f
    2af6:	01 96       	adiw	r24, 0x01	; 1
    2af8:	9f a7       	std	Y+47, r25	; 0x2f
    2afa:	8e a7       	std	Y+46, r24	; 0x2e
    2afc:	9a a9       	ldd	r25, Y+50	; 0x32
    2afe:	91 50       	subi	r25, 0x01	; 1
    2b00:	9a ab       	std	Y+50, r25	; 0x32
    2b02:	ea a9       	ldd	r30, Y+50	; 0x32
    2b04:	ee 23       	and	r30, r30
    2b06:	51 f7       	brne	.-44     	; 0x2adc <main+0x3a>
	const char kpd_text[]="kpd value: ";
    2b08:	ce 01       	movw	r24, r28
    2b0a:	82 96       	adiw	r24, 0x22	; 34
    2b0c:	9c ab       	std	Y+52, r25	; 0x34
    2b0e:	8b ab       	std	Y+51, r24	; 0x33
    2b10:	ec e6       	ldi	r30, 0x6C	; 108
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	fe ab       	std	Y+54, r31	; 0x36
    2b16:	ed ab       	std	Y+53, r30	; 0x35
    2b18:	fc e0       	ldi	r31, 0x0C	; 12
    2b1a:	ff ab       	std	Y+55, r31	; 0x37
    2b1c:	ed a9       	ldd	r30, Y+53	; 0x35
    2b1e:	fe a9       	ldd	r31, Y+54	; 0x36
    2b20:	00 80       	ld	r0, Z
    2b22:	8d a9       	ldd	r24, Y+53	; 0x35
    2b24:	9e a9       	ldd	r25, Y+54	; 0x36
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	9e ab       	std	Y+54, r25	; 0x36
    2b2a:	8d ab       	std	Y+53, r24	; 0x35
    2b2c:	eb a9       	ldd	r30, Y+51	; 0x33
    2b2e:	fc a9       	ldd	r31, Y+52	; 0x34
    2b30:	00 82       	st	Z, r0
    2b32:	8b a9       	ldd	r24, Y+51	; 0x33
    2b34:	9c a9       	ldd	r25, Y+52	; 0x34
    2b36:	01 96       	adiw	r24, 0x01	; 1
    2b38:	9c ab       	std	Y+52, r25	; 0x34
    2b3a:	8b ab       	std	Y+51, r24	; 0x33
    2b3c:	9f a9       	ldd	r25, Y+55	; 0x37
    2b3e:	91 50       	subi	r25, 0x01	; 1
    2b40:	9f ab       	std	Y+55, r25	; 0x37
    2b42:	ef a9       	ldd	r30, Y+55	; 0x37
    2b44:	ee 23       	and	r30, r30
    2b46:	51 f7       	brne	.-44     	; 0x2b1c <main+0x7a>


	DIO_voidSetPinDirection(DIO_PORTD,DIO_PIN7,DIO_PIN_OUTPUT);
    2b48:	83 e0       	ldi	r24, 0x03	; 3
    2b4a:	67 e0       	ldi	r22, 0x07	; 7
    2b4c:	41 e0       	ldi	r20, 0x01	; 1
    2b4e:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	/*ADC init and pin choice*/
	DIO_voidSetPinDirection(DIO_PORTA,DIO_PIN0,DIO_PIN_INPUT);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	60 e0       	ldi	r22, 0x00	; 0
    2b56:	40 e0       	ldi	r20, 0x00	; 0
    2b58:	0e 94 28 06 	call	0xc50	; 0xc50 <DIO_voidSetPinDirection>
	ADC_voidInit(ADC_VREF_AVCC,ADC_PRESCALER_2);
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	0e 94 9b 05 	call	0xb36	; 0xb36 <ADC_voidInit>
	/*keypad init*/
	KPD_init();
    2b64:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <KPD_init>
	/*lcd init*/
	LCD_voidInit();
    2b68:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <LCD_voidInit>

	/*lcd text*/
	LCD_voidSetCursor(0,0);
    2b6c:	80 e0       	ldi	r24, 0x00	; 0
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	0e 94 2d 14 	call	0x285a	; 0x285a <LCD_voidSetCursor>
	LCD_voidWriteString(ldr_text);
    2b74:	ce 01       	movw	r24, r28
    2b76:	46 96       	adiw	r24, 0x16	; 22
    2b78:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_voidWriteString>
	LCD_voidSetCursor(1,0);
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	0e 94 2d 14 	call	0x285a	; 0x285a <LCD_voidSetCursor>
	LCD_voidWriteString(kpd_text);
    2b84:	ce 01       	movw	r24, r28
    2b86:	82 96       	adiw	r24, 0x22	; 34
    2b88:	0e 94 4b 14 	call	0x2896	; 0x2896 <LCD_voidWriteString>
	while(1)
	{

		ADC_voidReadDigitalValue(ADC_CHANNEL_ADC0,&adc_value);
    2b8c:	9e 01       	movw	r18, r28
    2b8e:	2e 5e       	subi	r18, 0xEE	; 238
    2b90:	3f 4f       	sbci	r19, 0xFF	; 255
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	b9 01       	movw	r22, r18
    2b96:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <ADC_voidReadDigitalValue>
		digital_value=adc_value/10;
    2b9a:	8a 89       	ldd	r24, Y+18	; 0x12
    2b9c:	9b 89       	ldd	r25, Y+19	; 0x13
    2b9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	b9 01       	movw	r22, r18
    2ba4:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <__udivmodhi4>
    2ba8:	cb 01       	movw	r24, r22
    2baa:	89 8b       	std	Y+17, r24	; 0x11
		LCD_voidSetCursor(0,10);
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	6a e0       	ldi	r22, 0x0A	; 10
    2bb0:	0e 94 2d 14 	call	0x285a	; 0x285a <LCD_voidSetCursor>
		LCD_voidWriteNum(digital_value);//dig
    2bb4:	89 89       	ldd	r24, Y+17	; 0x11
    2bb6:	88 2f       	mov	r24, r24
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	a0 e0       	ldi	r26, 0x00	; 0
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	bc 01       	movw	r22, r24
    2bc0:	cd 01       	movw	r24, r26
    2bc2:	0e 94 72 14 	call	0x28e4	; 0x28e4 <LCD_voidWriteNum>

		/*made this condition to not get stuck in 2nd while*/
		if(KPD_GetPressedKey()!=0)
    2bc6:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <KPD_GetPressedKey>
    2bca:	88 23       	and	r24, r24
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <main+0x12e>
    2bce:	b6 c0       	rjmp	.+364    	; 0x2d3c <main+0x29a>
    2bd0:	b1 c0       	rjmp	.+354    	; 0x2d34 <main+0x292>
		{
			while(count<2)
			{
				arr[count]=KPD_GetPressedKey();
    2bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd4:	08 2f       	mov	r16, r24
    2bd6:	10 e0       	ldi	r17, 0x00	; 0
    2bd8:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <KPD_GetPressedKey>
    2bdc:	28 2f       	mov	r18, r24
    2bde:	ce 01       	movw	r24, r28
    2be0:	44 96       	adiw	r24, 0x14	; 20
    2be2:	fc 01       	movw	r30, r24
    2be4:	e0 0f       	add	r30, r16
    2be6:	f1 1f       	adc	r31, r17
    2be8:	20 83       	st	Z, r18
				if(arr[count]==0)
    2bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	44 96       	adiw	r24, 0x14	; 20
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f3 1f       	adc	r31, r19
    2bfa:	80 81       	ld	r24, Z
    2bfc:	88 23       	and	r24, r24
    2bfe:	09 f4       	brne	.+2      	; 0x2c02 <main+0x160>
    2c00:	99 c0       	rjmp	.+306    	; 0x2d34 <main+0x292>

				}
				else
				{
					/*to avoid overwriting*/
					LCD_voidSetCursor(1,9+count);
    2c02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c04:	98 2f       	mov	r25, r24
    2c06:	97 5f       	subi	r25, 0xF7	; 247
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	69 2f       	mov	r22, r25
    2c0c:	0e 94 2d 14 	call	0x285a	; 0x285a <LCD_voidSetCursor>
					LCD_voidWriteChar(arr[count]);
    2c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	ce 01       	movw	r24, r28
    2c18:	44 96       	adiw	r24, 0x14	; 20
    2c1a:	fc 01       	movw	r30, r24
    2c1c:	e2 0f       	add	r30, r18
    2c1e:	f3 1f       	adc	r31, r19
    2c20:	80 81       	ld	r24, Z
    2c22:	0e 94 3e 12 	call	0x247c	; 0x247c <LCD_voidWriteChar>
					/*numbers coming from keypad are ascii*/
					thershold_value=((arr[0]-48)*10)+(arr[1]-48);
    2c26:	8c 89       	ldd	r24, Y+20	; 0x14
    2c28:	88 2f       	mov	r24, r24
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	9c 01       	movw	r18, r24
    2c2e:	22 0f       	add	r18, r18
    2c30:	33 1f       	adc	r19, r19
    2c32:	c9 01       	movw	r24, r18
    2c34:	88 0f       	add	r24, r24
    2c36:	99 1f       	adc	r25, r25
    2c38:	88 0f       	add	r24, r24
    2c3a:	99 1f       	adc	r25, r25
    2c3c:	82 0f       	add	r24, r18
    2c3e:	93 1f       	adc	r25, r19
    2c40:	98 2f       	mov	r25, r24
    2c42:	8d 89       	ldd	r24, Y+21	; 0x15
    2c44:	89 0f       	add	r24, r25
    2c46:	80 51       	subi	r24, 0x10	; 16
    2c48:	88 8b       	std	Y+16, r24	; 0x10
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a8 e4       	ldi	r26, 0x48	; 72
    2c50:	b3 e4       	ldi	r27, 0x43	; 67
    2c52:	8b 87       	std	Y+11, r24	; 0x0b
    2c54:	9c 87       	std	Y+12, r25	; 0x0c
    2c56:	ad 87       	std	Y+13, r26	; 0x0d
    2c58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	4a ef       	ldi	r20, 0xFA	; 250
    2c68:	54 e4       	ldi	r21, 0x44	; 68
    2c6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2c6e:	dc 01       	movw	r26, r24
    2c70:	cb 01       	movw	r24, r22
    2c72:	8f 83       	std	Y+7, r24	; 0x07
    2c74:	98 87       	std	Y+8, r25	; 0x08
    2c76:	a9 87       	std	Y+9, r26	; 0x09
    2c78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2c7c:	78 85       	ldd	r23, Y+8	; 0x08
    2c7e:	89 85       	ldd	r24, Y+9	; 0x09
    2c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	40 e8       	ldi	r20, 0x80	; 128
    2c88:	5f e3       	ldi	r21, 0x3F	; 63
    2c8a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2c8e:	88 23       	and	r24, r24
    2c90:	2c f4       	brge	.+10     	; 0x2c9c <main+0x1fa>
		__ticks = 1;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	9e 83       	std	Y+6, r25	; 0x06
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	3f c0       	rjmp	.+126    	; 0x2d1a <main+0x278>
	else if (__tmp > 65535)
    2c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c9e:	78 85       	ldd	r23, Y+8	; 0x08
    2ca0:	89 85       	ldd	r24, Y+9	; 0x09
    2ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	3f ef       	ldi	r19, 0xFF	; 255
    2ca8:	4f e7       	ldi	r20, 0x7F	; 127
    2caa:	57 e4       	ldi	r21, 0x47	; 71
    2cac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2cb0:	18 16       	cp	r1, r24
    2cb2:	4c f5       	brge	.+82     	; 0x2d06 <main+0x264>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cbc:	20 e0       	ldi	r18, 0x00	; 0
    2cbe:	30 e0       	ldi	r19, 0x00	; 0
    2cc0:	40 e2       	ldi	r20, 0x20	; 32
    2cc2:	51 e4       	ldi	r21, 0x41	; 65
    2cc4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2cc8:	dc 01       	movw	r26, r24
    2cca:	cb 01       	movw	r24, r22
    2ccc:	bc 01       	movw	r22, r24
    2cce:	cd 01       	movw	r24, r26
    2cd0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cd4:	dc 01       	movw	r26, r24
    2cd6:	cb 01       	movw	r24, r22
    2cd8:	9e 83       	std	Y+6, r25	; 0x06
    2cda:	8d 83       	std	Y+5, r24	; 0x05
    2cdc:	0f c0       	rjmp	.+30     	; 0x2cfc <main+0x25a>
    2cde:	88 ec       	ldi	r24, 0xC8	; 200
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	9c 83       	std	Y+4, r25	; 0x04
    2ce4:	8b 83       	std	Y+3, r24	; 0x03
    2ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce8:	9c 81       	ldd	r25, Y+4	; 0x04
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <main+0x248>
    2cee:	9c 83       	std	Y+4, r25	; 0x04
    2cf0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cf2:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf4:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf6:	01 97       	sbiw	r24, 0x01	; 1
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	69 f7       	brne	.-38     	; 0x2cde <main+0x23c>
    2d04:	14 c0       	rjmp	.+40     	; 0x2d2e <main+0x28c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d06:	6f 81       	ldd	r22, Y+7	; 0x07
    2d08:	78 85       	ldd	r23, Y+8	; 0x08
    2d0a:	89 85       	ldd	r24, Y+9	; 0x09
    2d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2d12:	dc 01       	movw	r26, r24
    2d14:	cb 01       	movw	r24, r22
    2d16:	9e 83       	std	Y+6, r25	; 0x06
    2d18:	8d 83       	std	Y+5, r24	; 0x05
    2d1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1e:	9a 83       	std	Y+2, r25	; 0x02
    2d20:	89 83       	std	Y+1, r24	; 0x01
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	9a 81       	ldd	r25, Y+2	; 0x02
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <main+0x284>
    2d2a:	9a 83       	std	Y+2, r25	; 0x02
    2d2c:	89 83       	std	Y+1, r24	; 0x01
					_delay_ms(200);
					count++;
    2d2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d30:	8f 5f       	subi	r24, 0xFF	; 255
    2d32:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_voidWriteNum(digital_value);//dig

		/*made this condition to not get stuck in 2nd while*/
		if(KPD_GetPressedKey()!=0)
		{
			while(count<2)
    2d34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d36:	82 30       	cpi	r24, 0x02	; 2
    2d38:	08 f4       	brcc	.+2      	; 0x2d3c <main+0x29a>
    2d3a:	4b cf       	rjmp	.-362    	; 0x2bd2 <main+0x130>
				}
			}

		}
		/*led on/off conditions*/
		if(thershold_value>digital_value)
    2d3c:	98 89       	ldd	r25, Y+16	; 0x10
    2d3e:	89 89       	ldd	r24, Y+17	; 0x11
    2d40:	89 17       	cp	r24, r25
    2d42:	30 f4       	brcc	.+12     	; 0x2d50 <main+0x2ae>
		{
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_HIGH);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	67 e0       	ldi	r22, 0x07	; 7
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
    2d4e:	05 c0       	rjmp	.+10     	; 0x2d5a <main+0x2b8>
		}
		else
		{
			DIO_voidSetPinValue(DIO_PORTD,DIO_PIN7,DIO_PIN_LOW);
    2d50:	83 e0       	ldi	r24, 0x03	; 3
    2d52:	67 e0       	ldi	r22, 0x07	; 7
    2d54:	40 e0       	ldi	r20, 0x00	; 0
    2d56:	0e 94 0b 08 	call	0x1016	; 0x1016 <DIO_voidSetPinValue>
		}

		count=0;
    2d5a:	1f 86       	std	Y+15, r1	; 0x0f
    2d5c:	17 cf       	rjmp	.-466    	; 0x2b8c <main+0xea>

00002d5e <__mulsi3>:
    2d5e:	62 9f       	mul	r22, r18
    2d60:	d0 01       	movw	r26, r0
    2d62:	73 9f       	mul	r23, r19
    2d64:	f0 01       	movw	r30, r0
    2d66:	82 9f       	mul	r24, r18
    2d68:	e0 0d       	add	r30, r0
    2d6a:	f1 1d       	adc	r31, r1
    2d6c:	64 9f       	mul	r22, r20
    2d6e:	e0 0d       	add	r30, r0
    2d70:	f1 1d       	adc	r31, r1
    2d72:	92 9f       	mul	r25, r18
    2d74:	f0 0d       	add	r31, r0
    2d76:	83 9f       	mul	r24, r19
    2d78:	f0 0d       	add	r31, r0
    2d7a:	74 9f       	mul	r23, r20
    2d7c:	f0 0d       	add	r31, r0
    2d7e:	65 9f       	mul	r22, r21
    2d80:	f0 0d       	add	r31, r0
    2d82:	99 27       	eor	r25, r25
    2d84:	72 9f       	mul	r23, r18
    2d86:	b0 0d       	add	r27, r0
    2d88:	e1 1d       	adc	r30, r1
    2d8a:	f9 1f       	adc	r31, r25
    2d8c:	63 9f       	mul	r22, r19
    2d8e:	b0 0d       	add	r27, r0
    2d90:	e1 1d       	adc	r30, r1
    2d92:	f9 1f       	adc	r31, r25
    2d94:	bd 01       	movw	r22, r26
    2d96:	cf 01       	movw	r24, r30
    2d98:	11 24       	eor	r1, r1
    2d9a:	08 95       	ret

00002d9c <__udivmodhi4>:
    2d9c:	aa 1b       	sub	r26, r26
    2d9e:	bb 1b       	sub	r27, r27
    2da0:	51 e1       	ldi	r21, 0x11	; 17
    2da2:	07 c0       	rjmp	.+14     	; 0x2db2 <__udivmodhi4_ep>

00002da4 <__udivmodhi4_loop>:
    2da4:	aa 1f       	adc	r26, r26
    2da6:	bb 1f       	adc	r27, r27
    2da8:	a6 17       	cp	r26, r22
    2daa:	b7 07       	cpc	r27, r23
    2dac:	10 f0       	brcs	.+4      	; 0x2db2 <__udivmodhi4_ep>
    2dae:	a6 1b       	sub	r26, r22
    2db0:	b7 0b       	sbc	r27, r23

00002db2 <__udivmodhi4_ep>:
    2db2:	88 1f       	adc	r24, r24
    2db4:	99 1f       	adc	r25, r25
    2db6:	5a 95       	dec	r21
    2db8:	a9 f7       	brne	.-22     	; 0x2da4 <__udivmodhi4_loop>
    2dba:	80 95       	com	r24
    2dbc:	90 95       	com	r25
    2dbe:	bc 01       	movw	r22, r24
    2dc0:	cd 01       	movw	r24, r26
    2dc2:	08 95       	ret

00002dc4 <__udivmodsi4>:
    2dc4:	a1 e2       	ldi	r26, 0x21	; 33
    2dc6:	1a 2e       	mov	r1, r26
    2dc8:	aa 1b       	sub	r26, r26
    2dca:	bb 1b       	sub	r27, r27
    2dcc:	fd 01       	movw	r30, r26
    2dce:	0d c0       	rjmp	.+26     	; 0x2dea <__udivmodsi4_ep>

00002dd0 <__udivmodsi4_loop>:
    2dd0:	aa 1f       	adc	r26, r26
    2dd2:	bb 1f       	adc	r27, r27
    2dd4:	ee 1f       	adc	r30, r30
    2dd6:	ff 1f       	adc	r31, r31
    2dd8:	a2 17       	cp	r26, r18
    2dda:	b3 07       	cpc	r27, r19
    2ddc:	e4 07       	cpc	r30, r20
    2dde:	f5 07       	cpc	r31, r21
    2de0:	20 f0       	brcs	.+8      	; 0x2dea <__udivmodsi4_ep>
    2de2:	a2 1b       	sub	r26, r18
    2de4:	b3 0b       	sbc	r27, r19
    2de6:	e4 0b       	sbc	r30, r20
    2de8:	f5 0b       	sbc	r31, r21

00002dea <__udivmodsi4_ep>:
    2dea:	66 1f       	adc	r22, r22
    2dec:	77 1f       	adc	r23, r23
    2dee:	88 1f       	adc	r24, r24
    2df0:	99 1f       	adc	r25, r25
    2df2:	1a 94       	dec	r1
    2df4:	69 f7       	brne	.-38     	; 0x2dd0 <__udivmodsi4_loop>
    2df6:	60 95       	com	r22
    2df8:	70 95       	com	r23
    2dfa:	80 95       	com	r24
    2dfc:	90 95       	com	r25
    2dfe:	9b 01       	movw	r18, r22
    2e00:	ac 01       	movw	r20, r24
    2e02:	bd 01       	movw	r22, r26
    2e04:	cf 01       	movw	r24, r30
    2e06:	08 95       	ret

00002e08 <__prologue_saves__>:
    2e08:	2f 92       	push	r2
    2e0a:	3f 92       	push	r3
    2e0c:	4f 92       	push	r4
    2e0e:	5f 92       	push	r5
    2e10:	6f 92       	push	r6
    2e12:	7f 92       	push	r7
    2e14:	8f 92       	push	r8
    2e16:	9f 92       	push	r9
    2e18:	af 92       	push	r10
    2e1a:	bf 92       	push	r11
    2e1c:	cf 92       	push	r12
    2e1e:	df 92       	push	r13
    2e20:	ef 92       	push	r14
    2e22:	ff 92       	push	r15
    2e24:	0f 93       	push	r16
    2e26:	1f 93       	push	r17
    2e28:	cf 93       	push	r28
    2e2a:	df 93       	push	r29
    2e2c:	cd b7       	in	r28, 0x3d	; 61
    2e2e:	de b7       	in	r29, 0x3e	; 62
    2e30:	ca 1b       	sub	r28, r26
    2e32:	db 0b       	sbc	r29, r27
    2e34:	0f b6       	in	r0, 0x3f	; 63
    2e36:	f8 94       	cli
    2e38:	de bf       	out	0x3e, r29	; 62
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	cd bf       	out	0x3d, r28	; 61
    2e3e:	09 94       	ijmp

00002e40 <__epilogue_restores__>:
    2e40:	2a 88       	ldd	r2, Y+18	; 0x12
    2e42:	39 88       	ldd	r3, Y+17	; 0x11
    2e44:	48 88       	ldd	r4, Y+16	; 0x10
    2e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e52:	b9 84       	ldd	r11, Y+9	; 0x09
    2e54:	c8 84       	ldd	r12, Y+8	; 0x08
    2e56:	df 80       	ldd	r13, Y+7	; 0x07
    2e58:	ee 80       	ldd	r14, Y+6	; 0x06
    2e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2e60:	aa 81       	ldd	r26, Y+2	; 0x02
    2e62:	b9 81       	ldd	r27, Y+1	; 0x01
    2e64:	ce 0f       	add	r28, r30
    2e66:	d1 1d       	adc	r29, r1
    2e68:	0f b6       	in	r0, 0x3f	; 63
    2e6a:	f8 94       	cli
    2e6c:	de bf       	out	0x3e, r29	; 62
    2e6e:	0f be       	out	0x3f, r0	; 63
    2e70:	cd bf       	out	0x3d, r28	; 61
    2e72:	ed 01       	movw	r28, r26
    2e74:	08 95       	ret

00002e76 <_exit>:
    2e76:	f8 94       	cli

00002e78 <__stop_program>:
    2e78:	ff cf       	rjmp	.-2      	; 0x2e78 <__stop_program>
